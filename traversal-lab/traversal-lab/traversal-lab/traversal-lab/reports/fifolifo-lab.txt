Lab report for Stack and Queue Lab - tgidwani
Timestamp: 2013-10-18 16:28:33

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.01655 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

......................

Finished in 0.01196 seconds
22 examples, 0 failures


** Details for Push doesn't increment size.

.....F................

Failures:

  1) push should work for any size stack
     Expected: #fifolifo.core.Stack{:top (5 2), :size 2}
          got: #fifolifo.core.Stack{:top (5 2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-1/spec/fifolifo/core_spec.clj:37

Finished in 0.08371 seconds
22 examples, 1 failures


** Details for Pop of empty makes size negative.

......F...............

Failures:

  1) pop should work for empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-2/spec/fifolifo/core_spec.clj:44

Finished in 0.08012 seconds
22 examples, 1 failures


** Details for Pop doesn't remove elements.

.......F..............

Failures:

  1) pop should work for any size stack
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: #fifolifo.core.Stack{:top (4 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-3/spec/fifolifo/core_spec.clj:47

Finished in 0.08793 seconds
22 examples, 1 failures


** Details for Pop reverses elements.

.......F.F............

Failures:

  1) pop should work for any size stack
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: #fifolifo.core.Stack{:top (4 2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-4/spec/fifolifo/core_spec.clj:47

  2) top should work for any size stack
     Expected: 3
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-4/spec/fifolifo/core_spec.clj:57

Finished in 0.06847 seconds
22 examples, 2 failures


** Details for Enqueue doesn't increment size.

...............FF.....

Failures:

  1) enqueue should increment the size
     Expected: 2
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-5/spec/fifolifo/core_spec.clj:87

  2) enqueue should work for any size queue
     Expected: #fifolifo.core.Queue{:back (4 2), :front nil, :size 2}
          got: #fifolifo.core.Queue{:back (4 2), :front nil, :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-5/spec/fifolifo/core_spec.clj:90

Finished in 0.08179 seconds
22 examples, 2 failures


** Details for Dequeue of empty makes size negative.

.................F....

Failures:

  1) dequeue should work for empty stack
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-6/spec/fifolifo/core_spec.clj:99

Finished in 0.08989 seconds
22 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

..................F.F.

Failures:

  1) dequeue should work when front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-7/spec/fifolifo/core_spec.clj:102

  2) peek should work when front is empty
     Expected: 2
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-7/spec/fifolifo/core_spec.clj:111

Finished in 0.03374 seconds
22 examples, 2 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFFF.F..FFFFFFFFFF

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:21

  2) stack-size should work for an empty stack
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:28

  3) stack-size should work a stack of any size
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:31

  4) push should work for any size stack
     Expected: #fifolifo.core.Stack{:top (5 2), :size 2}
          got: #fifolifo.core.Stack{:top (5 [:top (2)] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:37

  5) pop should work for empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:44

  6) pop should work for any size stack
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:47

  7) top should work for any size stack
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:57

  8) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:72

  9) queue-size should work for empty queue
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:78

  10) queue-size should work for any size queue
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:81

  11) enqueue should increment the size
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:87

  12) enqueue should work for any size queue
     Expected: #fifolifo.core.Queue{:back (4 2), :front nil, :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:90

  13) dequeue should work for empty stack
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:99

  14) dequeue should work when front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:102

  15) dequeue should work for any size queue
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:105

  16) peek should work when front is empty
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:111

  17) peek should work for any size queue
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-8/spec/fifolifo/core_spec.clj:114

Finished in 0.26451 seconds
22 examples, 17 failures


** Details for Flipping doesn't erase back.

..................F...

Failures:

  1) dequeue should work when front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (1 2 3), :front (2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-9/spec/fifolifo/core_spec.clj:102

Finished in 0.05129 seconds
22 examples, 1 failures


** Details for Queue behaves like a stack.

..................FFFF

Failures:

  1) dequeue should work when front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (2 3), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-10/spec/fifolifo/core_spec.clj:102

  2) dequeue should work for any size queue
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (), :front (3 2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-10/spec/fifolifo/core_spec.clj:105

  3) peek should work when front is empty
     Expected: 2
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-10/spec/fifolifo/core_spec.clj:111

  4) peek should work for any size queue
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tgidwani/broke-10/spec/fifolifo/core_spec.clj:114

Finished in 0.12891 seconds
22 examples, 4 failures
