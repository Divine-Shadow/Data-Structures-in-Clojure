Lab report for Linked List Lab - jying
Timestamp: 2013-09-27 17:08:25

|  :scenario |                                    :title |                              :result | :score |
|------------+-------------------------------------------+--------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. | Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. | Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. | Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. | Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.01836 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

..........................

Finished in 0.00506 seconds
26 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF................

Failures:

  1) insert-at-end creates a cons cell
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-1/spec/linked_lists/core_spec.clj:29

  2) insert-at-end should work with empty lists
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-1/spec/linked_lists/core_spec.clj:32

  3) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-1/spec/linked_lists/core_spec.clj:36

Finished in 0.06203 seconds
26 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

...........F..............

Failures:

  1) sorted insert should insert in order
     Expected: #linked_lists.core.Cons{:car 0, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 7, :cdr #linked_lists.core.Cons{:car 0, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-2/spec/linked_lists/core_spec.clj:45

Finished in 0.06607 seconds
26 examples, 1 failures


** Details for Sorted insert doesn't recycle memory.

............F.............

Failures:

  1) sorted insert should recycle the memory
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/jying/broke-3/spec/linked_lists/core_spec.clj:51

Finished in 0.00862 seconds
26 examples, 1 failures


** Details for Search doesn't handle base case.

.............FFF.........F

Failures:

  1) search should work with empty lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-4/spec/linked_lists/core_spec.clj:56

  2) search should work with ordered lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-4/spec/linked_lists/core_spec.clj:60

  3) search should work with disordered lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-4/spec/linked_lists/core_spec.clj:67

  4) efficient-delete should return the original if nothing is deleted
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/jying/broke-4/spec/linked_lists/core_spec.clj:119

Finished in 0.00738 seconds
26 examples, 4 failures


** Details for Delete removes all copies.

.................F......F.

Failures:

  1) delete should delete one copy even some element is repeated
     Expected: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-5/spec/linked_lists/core_spec.clj:82

  2) efficient-delete should delete one copy even some element is repeated
     Expected: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-5/spec/linked_lists/core_spec.clj:115

Finished in 0.03713 seconds
26 examples, 2 failures


** Details for Delete doesn't.

.................F......F.

Failures:

  1) delete should delete one copy even some element is repeated
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-6/spec/linked_lists/core_spec.clj:79

  2) efficient-delete should delete one copy even some element is repeated
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-6/spec/linked_lists/core_spec.clj:112

Finished in 0.05454 seconds
26 examples, 2 failures


** Details for Delete all only deletes one.

....................F.....

Failures:

  1) delete-all should delete all copy
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-7/spec/linked_lists/core_spec.clj:95

Finished in 0.04937 seconds
26 examples, 1 failures


** Details for Delete all truncates list.

....................F.....

Failures:

  1) delete-all should delete all copy
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-8/spec/linked_lists/core_spec.clj:95

Finished in 0.03645 seconds
26 examples, 1 failures


** Details for Efficient delete doesn't delete.

....................F.....

Failures:

  1) delete-all should delete all copy
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/jying/broke-9/spec/linked_lists/core_spec.clj:95

Finished in 0.03772 seconds
26 examples, 1 failures


** Details for Efficient delete doesn't return original.

.........................F

Failures:

  1) efficient-delete should return the original if nothing is deleted
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/jying/broke-10/spec/linked_lists/core_spec.clj:119

Finished in 0.00668 seconds
26 examples, 1 failures
