Lab report for Linked List Lab - mdrews
Timestamp: 2013-10-01 14:56:39

|  :scenario |                                    :title |                              :result | :score |
|------------+-------------------------------------------+--------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. | Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. | Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. | Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. | Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00483 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

................................

Finished in 0.00565 seconds
32 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FF.......................

Failures:

  1) insert-at-end should work with empty lists
     Expected: #linked_lists.core.Cons{:car 1, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-1/spec/linked_lists/core_spec.clj:40

Finished in 0.07028 seconds
32 examples, 2 failures


** Details for Sorted insert sorts in reverse order.

..........FFF...................

Failures:

  1) sorted insert should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-2/spec/linked_lists/core_spec.clj:48

  2) sorted insert should recycle memory when the element is being put at the front of the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 1, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-2/spec/linked_lists/core_spec.clj:51

  3) sorted insert should recycle memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-2/spec/linked_lists/core_spec.clj:54

Finished in 0.07823 seconds
32 examples, 3 failures


** Details for Sorted insert doesn't recycle memory.

............F...................

Failures:

  1) sorted insert should recycle memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-3/spec/linked_lists/core_spec.clj:54

Finished in 0.02734 seconds
32 examples, 1 failures


** Details for Search doesn't handle base case.

.............F..F...........F...

Failures:

  1) search should work with empty lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-4/spec/linked_lists/core_spec.clj:59

  2) search should work when the given element isn't in the list
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-4/spec/linked_lists/core_spec.clj:68

  3) efficient-delete should work when the given element isn't in the list
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-4/spec/linked_lists/core_spec.clj:110

Finished in 0.00742 seconds
32 examples, 3 failures


** Details for Delete removes all copies.

.....................F.........F

Failures:

  1) delete should work when there are multiple instances of the element in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-5/spec/linked_lists/core_spec.clj:85

  2) efficient-delete should work when there are multiple instances of the element in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-5/spec/linked_lists/core_spec.clj:119

Finished in 0.06188 seconds
32 examples, 2 failures


** Details for Delete doesn't.

...................FFF.......FFF

Failures:

  1) delete should work when the given element is at the first spot in the list
     Expected: #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-6/spec/linked_lists/core_spec.clj:79

  2) delete should work when the given element is not at the first spot in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-6/spec/linked_lists/core_spec.clj:82

  3) delete should work when there are multiple instances of the element in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-6/spec/linked_lists/core_spec.clj:85

  4) efficient-delete should work when the given element is at the first spot in the list
     Expected: #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-6/spec/linked_lists/core_spec.clj:113

  5) efficient-delete should work when the given element is not at the first spot in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-6/spec/linked_lists/core_spec.clj:116

  6) efficient-delete should work when there are multiple instances of the element in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-6/spec/linked_lists/core_spec.clj:119

Finished in 0.02689 seconds
32 examples, 6 failures


** Details for Delete all only deletes one.

..........................F.....

Failures:

  1) delete-all should work when there are multiple instances of the given element in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-7/spec/linked_lists/core_spec.clj:102

Finished in 0.04925 seconds
32 examples, 1 failures


** Details for Delete all truncates list.

........................F.F.....

Failures:

  1) delete-all should work when the given element is first in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-8/spec/linked_lists/core_spec.clj:96

  2) delete-all should work when there are multiple instances of the given element in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-8/spec/linked_lists/core_spec.clj:102

Finished in 0.06022 seconds
32 examples, 2 failures


** Details for Efficient delete doesn't delete.

........................F.F..FFF

Failures:

  1) delete-all should work when the given element is first in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-9/spec/linked_lists/core_spec.clj:96

  2) delete-all should work when there are multiple instances of the given element in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-9/spec/linked_lists/core_spec.clj:102

  3) efficient-delete should work when the given element is at the first spot in the list
     Expected: #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-9/spec/linked_lists/core_spec.clj:113

  4) efficient-delete should work when the given element is not at the first spot in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-9/spec/linked_lists/core_spec.clj:116

  5) efficient-delete should work when there are multiple instances of the element in the list
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-9/spec/linked_lists/core_spec.clj:119

Finished in 0.05113 seconds
32 examples, 5 failures


** Details for Efficient delete doesn't return original.

............................F...

Failures:

  1) efficient-delete should work when the given element isn't in the list
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/mdrews/broke-10/spec/linked_lists/core_spec.clj:110

Finished in 0.01522 seconds
32 examples, 1 failures
