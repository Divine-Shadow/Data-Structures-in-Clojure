Lab report for Linked List Lab - gkumar7
Timestamp: 2013-09-29 13:15:44

|  :scenario |                                    :title |                              :result | :score |
|------------+-------------------------------------------+--------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. | Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. | Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. | Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. | Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00443 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

...............................

Finished in 0.00593 seconds
31 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FF......................

Failures:

  1) insert-at-end should work for empty lists
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-1/spec/linked_lists/core_spec.clj:38

  2) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-1/spec/linked_lists/core_spec.clj:41

Finished in 0.05091 seconds
31 examples, 2 failures


** Details for Sorted insert sorts in reverse order.

..........FFFFF................

Failures:

  1) sorted-insert should recycle memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-2/spec/linked_lists/core_spec.clj:51

  2) sorted-insert should work for lists with data where element must be inserted in the front
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-2/spec/linked_lists/core_spec.clj:54

  3) sorted-insert should work for lists with data where the element must be inserted somewhere in the middle
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 7, :cdr #linked_lists.core.Cons{:car 8, :cdr #linked_lists.core.Cons{:car 9, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 8, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 7, :cdr #linked_lists.core.Cons{:car 9, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-2/spec/linked_lists/core_spec.clj:57

  4) sorted-insert should work for lists with data where the element must be inserted at the end
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 7, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 7, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-2/spec/linked_lists/core_spec.clj:60

  5) sorted-insert should work for lists with data where there are multiple elements which are the same
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-2/spec/linked_lists/core_spec.clj:63

Finished in 0.05013 seconds
31 examples, 5 failures


** Details for Sorted insert doesn't recycle memory.

..........F....................

Failures:

  1) sorted-insert should recycle memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-3/spec/linked_lists/core_spec.clj:51

Finished in 0.00710 seconds
31 examples, 1 failures


** Details for Search doesn't handle base case.

...............FF.F.........F..

Failures:

  1) search should work for empty lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-4/spec/linked_lists/core_spec.clj:69

  2) search should work for lists with data which do not have the element
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-4/spec/linked_lists/core_spec.clj:72

  3) search should work for lists with data which do not include the element
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-4/spec/linked_lists/core_spec.clj:78

  4) efficient-delete should return xx if elt is not in xx
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-4/spec/linked_lists/core_spec.clj:117

Finished in 0.01630 seconds
31 examples, 4 failures


** Details for Delete removes all copies.

......................F.......F

Failures:

  1) delete should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-5/spec/linked_lists/core_spec.clj:93

  2) efficient-delete should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-5/spec/linked_lists/core_spec.clj:123

Finished in 0.03246 seconds
31 examples, 2 failures


** Details for Delete doesn't.

.....................FF......FF

Failures:

  1) delete should work for lists with data where there is a single occurrence of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-6/spec/linked_lists/core_spec.clj:90

  2) delete should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-6/spec/linked_lists/core_spec.clj:93

  3) efficient-delete should work for lists with data where there is a single occurrence of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-6/spec/linked_lists/core_spec.clj:120

  4) efficient-delete should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-6/spec/linked_lists/core_spec.clj:123

Finished in 0.04927 seconds
31 examples, 4 failures


** Details for Delete all only deletes one.

..........................F....

Failures:

  1) delete-all should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-7/spec/linked_lists/core_spec.clj:108

Finished in 0.07061 seconds
31 examples, 1 failures


** Details for Delete all truncates list.

.........................FF....

Failures:

  1) delete-all should work for lists with data where there is a single occurrence of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-8/spec/linked_lists/core_spec.clj:105

  2) delete-all should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-8/spec/linked_lists/core_spec.clj:108

Finished in 0.08580 seconds
31 examples, 2 failures


** Details for Efficient delete doesn't delete.

.........................FF..FF

Failures:

  1) delete-all should work for lists with data where there is a single occurrence of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-9/spec/linked_lists/core_spec.clj:105

  2) delete-all should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-9/spec/linked_lists/core_spec.clj:108

  3) efficient-delete should work for lists with data where there is a single occurrence of elt
     Expected: #linked_lists.core.Cons{:car 4, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-9/spec/linked_lists/core_spec.clj:120

  4) efficient-delete should work for lists with data where there are multiple occurrences of elt
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-9/spec/linked_lists/core_spec.clj:123

Finished in 0.06599 seconds
31 examples, 4 failures


** Details for Efficient delete doesn't return original.

............................F..

Failures:

  1) efficient-delete should return xx if elt is not in xx
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/gkumar7/broke-10/spec/linked_lists/core_spec.clj:117

Finished in 0.00669 seconds
31 examples, 1 failures
