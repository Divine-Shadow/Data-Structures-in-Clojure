Lab report for  - msteele
Timestamp: 2013-09-23 17:59:14

|  :scenario |                                    :title |                                   :result | :score |
|------------+-------------------------------------------+-------------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                      Fail |     43 |
| qualifying |     Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Fail: Student tests did not detect error. |      0 |
|    broke-4 |          Search doesn't handle base case. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Fail: Student tests did not detect error. |      0 |
|    broke-6 |                           Delete doesn't. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. |      Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. |      Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Fail: Student tests did not detect error. |      0 |
|      total |                               Total Score |                                           |     83 |

Details:


** Details for Test student code vs instructor tests

......................F.

Failures:

  1) efficient-delete should delete things once that are in the list.
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/working/spec/linked_lists/core_spec.clj:118

Finished in 0.05120 seconds
24 examples, 1 failures


** Details for Test student tests vs instructor code

....................

Finished in 0.03047 seconds
20 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF..........

Failures:

  1) insert-at-end creates a cons cell
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/msteele/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with empty lists
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-1/spec/linked_lists/core_spec.clj:39

  3) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-1/spec/linked_lists/core_spec.clj:42

Finished in 0.05120 seconds
20 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

............F.......

Failures:

  1) sorted insert should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 6, :cdr nil}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-2/spec/linked_lists/core_spec.clj:52

Finished in 0.05363 seconds
20 examples, 1 failures


** Details for Sorted insert doesn't recycle memory.

....................

Finished in 0.00503 seconds
20 examples, 0 failures


** Details for Search doesn't handle base case.

...............F....

Failures:

  1) search should not find anything if it is not in the list
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-4/spec/linked_lists/core_spec.clj:64

Finished in 0.00637 seconds
20 examples, 1 failures


** Details for Delete removes all copies.

....................

Finished in 0.00519 seconds
20 examples, 0 failures


** Details for Delete doesn't.

.............F....F.

Failures:

  1) delete should delete something from a list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-6/spec/linked_lists/core_spec.clj:57

  2) efficient-delete should delete an item in the list if it is found in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-6/spec/linked_lists/core_spec.clj:76

Finished in 0.06154 seconds
20 examples, 2 failures


** Details for Delete all only deletes one.

................F...

Failures:

  1) delete-all should delete all of a certain item in a list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-7/spec/linked_lists/core_spec.clj:69

Finished in 0.06558 seconds
20 examples, 1 failures


** Details for Delete all truncates list.

................FF..

Failures:

  1) delete-all should delete all of a certain item in a list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-8/spec/linked_lists/core_spec.clj:69

  2) delete-all should delete only one item when the items in the list only once
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-8/spec/linked_lists/core_spec.clj:71

Finished in 0.06174 seconds
20 examples, 2 failures


** Details for Efficient delete doesn't delete.

................FFF.

Failures:

  1) delete-all should delete all of a certain item in a list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-9/spec/linked_lists/core_spec.clj:69

  2) delete-all should delete only one item when the items in the list only once
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-9/spec/linked_lists/core_spec.clj:71

  3) efficient-delete should delete an item in the list if it is found in the list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/msteele/broke-9/spec/linked_lists/core_spec.clj:76

Finished in 0.05291 seconds
20 examples, 3 failures


** Details for Efficient delete doesn't return original.

....................

Finished in 0.00475 seconds
20 examples, 0 failures
