Lab report for Stack and Queue Lab - ahicks2
Timestamp: 2013-10-20 21:57:02

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Fail |     42 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |     97 |

Details:


** Details for Test student code vs instructor tests

...................F

Failures:

  1) Queues should be able to enqueue things after dequeueping.
     Expected: (30 20 10 8 5)
          got: (10 10 10 8 5) (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/working/spec/fifolifo/core_spec.clj:115

Finished in 0.10392 seconds
20 examples, 1 failures


** Details for Test student tests vs instructor code

.............................

Finished in 0.00594 seconds
29 examples, 0 failures


** Details for Push doesn't increment size.

...F..FF.F.............FF....

Failures:

  1) should get stack size should get the size of a non-empty stack
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-1/spec/fifolifo/core_spec.clj:27

  2) should push to stacks should push to empty stack
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-1/spec/fifolifo/core_spec.clj:43

  3) should push to stacks should push to non-empty stack
     Expected: #fifolifo.core.Stack{:top (2 1), :size 2}
          got: #fifolifo.core.Stack{:top (2 1), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-1/spec/fifolifo/core_spec.clj:46

  4) should pop stacks should pop non-empty stacks
     Expected: #fifolifo.core.Stack{:top (2 1), :size 2}
          got: #fifolifo.core.Stack{:top (2 1), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-1/spec/fifolifo/core_spec.clj:56

  5) Push and Pop Should Make Sense size should increase in size after push
     Expected: 0
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-1/spec/fifolifo/core_spec.clj:114

  6) Push and Pop Should Make Sense size should not remain the same size after push
     Expected: 3
     not to =: 3
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-1/spec/fifolifo/core_spec.clj:117

Finished in 0.14071 seconds
29 examples, 6 failures


** Details for Pop of empty makes size negative.

........F....................

Failures:

  1) should pop stacks should-not pop empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-2/spec/fifolifo/core_spec.clj:53

Finished in 0.07938 seconds
29 examples, 1 failures


** Details for Pop doesn't remove elements.

.........F...................

Failures:

  1) should pop stacks should pop non-empty stacks
     Expected: #fifolifo.core.Stack{:top (2 1), :size 2}
          got: #fifolifo.core.Stack{:top (3 2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-3/spec/fifolifo/core_spec.clj:56

Finished in 0.13786 seconds
29 examples, 1 failures


** Details for Pop reverses elements.

.........F...................

Failures:

  1) should pop stacks should pop non-empty stacks
     Expected: #fifolifo.core.Stack{:top (2 1), :size 2}
          got: #fifolifo.core.Stack{:top (3 2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-4/spec/fifolifo/core_spec.clj:56

Finished in 0.10840 seconds
29 examples, 1 failures


** Details for Enqueue doesn't increment size.

.............FF..F..F........

Failures:

  1) Should enqueue elements should enqueue empty list
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-5/spec/fifolifo/core_spec.clj:75

  2) Should enqueue elements should enqueue non-empty list
     Expected: #fifolifo.core.Queue{:back (2 1), :front nil, :size 2}
          got: #fifolifo.core.Queue{:back (2 1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-5/spec/fifolifo/core_spec.clj:78

  3) Enqueue And Dequeue Should Make Sense size should not remain same after enqueue
     Expected: 0
     not to =: 0
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-5/spec/fifolifo/core_spec.clj:93

  4) Enqueue And Dequeue Should Make Sense size should increase after enqueue
     Expected: 3
          got: 4 (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-5/spec/fifolifo/core_spec.clj:102

Finished in 0.13742 seconds
29 examples, 4 failures


** Details for Dequeue of empty makes size negative.

......................F......

Failures:

  1) Enqueue And Dequeue Should Make Sense dequeue should not make size negative
     Expected: -1
     not to =: -1
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-6/spec/fifolifo/core_spec.clj:108

Finished in 0.01466 seconds
29 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

...............F.............

Failures:

  1) Should dequeue elements should dequeue empty front with reverse back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-7/spec/fifolifo/core_spec.clj:84

Finished in 0.09925 seconds
29 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFFFFF..FFFFF..FFF...F...

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:21

  2) should get stack size should get the size of a non-empty stack
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:27

  3) should get stack size should be zero for empty stacks
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:31

  4) should get stack size should-not return nil for empty stacks
     Expected: nil
     not to =: nil
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:35

  5) should push to stacks should push to empty stack
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:43

  6) should push to stacks should push to non-empty stack
     Expected: #fifolifo.core.Stack{:top (2 1), :size 2}
          got: #fifolifo.core.Stack{:top (2 [:top (1 [:top nil] [:size 0])] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:46

  7) should pop stacks should-not pop empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:53

  8) should pop stacks should pop non-empty stacks
     Expected: #fifolifo.core.Stack{:top (2 1), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:56

  9) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:68

  10) Should enqueue elements should enqueue empty list
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:75

  11) Should enqueue elements should enqueue non-empty list
     Expected: #fifolifo.core.Queue{:back (2 1), :front nil, :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:78

  12) Should dequeue elements should dequeue empty front with reverse back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:84

  13) Should dequeue elements should dequeue when front is not empty
     Expected: #fifolifo.core.Queue{:back (1 2 3), :front (5), :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:87

  14) Enqueue And Dequeue Should Make Sense size should decrease after dequeue
     Expected: nil
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:99

  15) Enqueue And Dequeue Should Make Sense size should increase after enqueue
     Expected: nil
          got: 4 (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:102

  16) Enqueue And Dequeue Should Make Sense the back after enqueue should add the element
     Expected: nil
          got: (4 1 2 3) (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:105

  17) Push and Pop Should Make Sense size should decrease after pop
     Expected: nil
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-8/spec/fifolifo/core_spec.clj:120

Finished in 0.28862 seconds
29 examples, 17 failures


** Details for Flipping doesn't erase back.

...............F.............

Failures:

  1) Should dequeue elements should dequeue empty front with reverse back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (1 2 3), :front (2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-9/spec/fifolifo/core_spec.clj:84

Finished in 0.10510 seconds
29 examples, 1 failures


** Details for Queue behaves like a stack.

...............FF............

Failures:

  1) Should dequeue elements should dequeue empty front with reverse back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (2 3), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-10/spec/fifolifo/core_spec.clj:84

  2) Should dequeue elements should dequeue when front is not empty
     Expected: #fifolifo.core.Queue{:back (1 2 3), :front (5), :size 1}
          got: #fifolifo.core.Queue{:back (2 3), :front (4 5), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/ahicks2/broke-10/spec/fifolifo/core_spec.clj:87

Finished in 0.10615 seconds
29 examples, 2 failures
