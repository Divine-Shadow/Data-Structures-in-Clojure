Lab report for Stack and Queue Lab - ltaupier
Timestamp: 2013-10-21 23:45:56

|  :scenario |                                :title |                   :result | :score |
|------------+---------------------------------------+---------------------------+--------|
|    working | Test student code vs instructor tests |                      Fail |     33 |
| qualifying | Test student tests vs instructor code |                      Fail |      4 |
| qualifying |           Qualifying Scenarios Failed | No further scenarios run. |      0 |
|      total |                           Total Score |                           |     37 |

Details:


** Details for Test student code vs instructor tests

........FF.......FFF

Failures:

  1) Stacks should pull things out in the correct order.
     Expected: (1 2 3 5 8)
          got: ([:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] 8) (using =)
     /home/grader/quarry/fifolifo-lab/ltaupier/working/spec/fifolifo/core_spec.clj:54

  2) Stacks should be able to push things after popping.
     Expected: (1 2 3 10 20)
          got: ([:top ([:top ([:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:size 6])] [:top ([:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:top ([:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:size 6])] [:size 5])] [:size 4])] [:top ([:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:top ([:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:size 6])] [:size 5])] [:top ([:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:size 6])] [:top (30 [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])] [:size 5])] [:top (20 [:top (10 [:top ([:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:top ([:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:top (8 [:top (5 [:top (3 [:top (2 [:top (1 [:top nil] [:size 0])] [:size 1])] [:size 2])] [:size 3])] [:size 4])] [:size 5])] [:size 4])] [:size 3])] [:size 4])]) (using =)
     /home/grader/quarry/fifolifo-lab/ltaupier/working/spec/fifolifo/core_spec.clj:62

  3) Queues should keep track of their size.
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/ltaupier/working/spec/fifolifo/core_spec.clj:101

  4) Queues should pull things out in the correct order.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ltaupier/working/spec/fifolifo/core_spec.clj:105

  5) Queues should be able to enqueue things after dequeueping.
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/ltaupier/working/spec/fifolifo/core_spec.clj:114

Finished in 0.32434 seconds
20 examples, 5 failures


** Details for Test student tests vs instructor code

.......................F

Failures:

  1) dequeue should reverse when the front is empty
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/ltaupier/qualifying/spec/fifolifo/core_spec.clj:122

Finished in 0.02205 seconds
24 examples, 1 failures
