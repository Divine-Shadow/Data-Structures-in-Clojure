Lab report for Stack and Queue Lab - psurowka
Timestamp: 2013-10-21 22:39:49

|  :scenario |                                  :title |                                   :result | :score |
|------------+-----------------------------------------+-------------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                      Fail |     33 |
| qualifying |   Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |            Push doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Fail: Student tests did not detect error. |      0 |
|    broke-8 | Dequeue doesn't dequeue after flipping. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Fail: Student tests did not detect error. |      0 |
|   broke-10 |             Queue behaves like a stack. | Fail: Student tests did not detect error. |      0 |
|      total |                             Total Score |                                           |     73 |

Details:


** Details for Test student code vs instructor tests

........FF.......FFF

Failures:

  1) Stacks should pull things out in the correct order.
     Expected: 8
          got: (8 5 3 2 1) (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/working/spec/fifolifo/core_spec.clj:52

  2) Stacks should be able to push things after popping.
     Expected: (1 2 3 10 20)
          got: ((1) (2 1) (3 2 1) (10 3 2 1) (20 10 3 2 1)) (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/working/spec/fifolifo/core_spec.clj:62

  3) Queues should keep track of their size.
     Don't know how to create ISeq from: java.lang.Long
     java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long
     	... 4 stack levels elided ...
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$dequeue.invoke(core.clj:84)
     	at fifolifo.core_spec$eval1364$fn__1365$fn__1370.invoke(/home/grader/quarry/fifolifo-lab/psurowka/working/spec/fifolifo/core_spec.clj:100)
     	... 42 stack levels elided ...

  4) Queues should pull things out in the correct order.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/working/spec/fifolifo/core_spec.clj:105

  5) Queues should be able to enqueue things after dequeueping.
     Don't know how to create ISeq from: java.lang.Long
     java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long
     	... 4 stack levels elided ...
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$reverse_q.invoke(core.clj:77)
     	at fifolifo.core$dequeue.invoke(core.clj:84)
     	at fifolifo.core_spec$eval1364$fn__1365$fn__1386.invoke(/home/grader/quarry/fifolifo-lab/psurowka/working/spec/fifolifo/core_spec.clj:111)
     	... 42 stack levels elided ...

Finished in 0.09834 seconds
20 examples, 5 failures


** Details for Test student tests vs instructor code

.............

Finished in 0.00316 seconds
13 examples, 0 failures


** Details for Push doesn't increment size.

......F......

Failures:

  1) more tests should increment size
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-1/spec/fifolifo/core_spec.clj:40

Finished in 0.01593 seconds
13 examples, 1 failures


** Details for Pop of empty makes size negative.

.......F.....

Failures:

  1) more tests should not make size negative
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-2/spec/fifolifo/core_spec.clj:43

Finished in 0.01210 seconds
13 examples, 1 failures


** Details for Pop doesn't remove elements.

........F....

Failures:

  1) more tests pop should remove elements
     Expected: #fifolifo.core.Stack{:top (4), :size 1}
          got: #fifolifo.core.Stack{:top (2 4), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-3/spec/fifolifo/core_spec.clj:47

Finished in 0.13105 seconds
13 examples, 1 failures


** Details for Pop reverses elements.

........F....

Failures:

  1) more tests pop should remove elements
     Expected: #fifolifo.core.Stack{:top (4), :size 1}
          got: #fifolifo.core.Stack{:top (2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-4/spec/fifolifo/core_spec.clj:47

Finished in 0.10078 seconds
13 examples, 1 failures


** Details for Enqueue doesn't increment size.

..........F..

Failures:

  1) more tests enqueue increments size
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-5/spec/fifolifo/core_spec.clj:54

Finished in 0.01148 seconds
13 examples, 1 failures


** Details for Dequeue of empty makes size negative.

...........F.

Failures:

  1) more tests dequeue makes no size negative
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-6/spec/fifolifo/core_spec.clj:57

Finished in 0.01576 seconds
13 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

.............

Finished in 0.00301 seconds
13 examples, 0 failures


** Details for Dequeue doesn't dequeue after flipping.

..F..F.FF.FF.

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-8/spec/fifolifo/core_spec.clj:21

  2) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-8/spec/fifolifo/core_spec.clj:34

  3) more tests should not make size negative
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-8/spec/fifolifo/core_spec.clj:43

  4) more tests pop should remove elements
     Expected: #fifolifo.core.Stack{:top (4), :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-8/spec/fifolifo/core_spec.clj:47

  5) more tests enqueue increments size
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-8/spec/fifolifo/core_spec.clj:54

  6) more tests dequeue makes no size negative
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/psurowka/broke-8/spec/fifolifo/core_spec.clj:57

Finished in 0.09747 seconds
13 examples, 6 failures


** Details for Flipping doesn't erase back.

.............

Finished in 0.00311 seconds
13 examples, 0 failures


** Details for Queue behaves like a stack.

.............

Finished in 0.00293 seconds
13 examples, 0 failures
