Lab report for Linked List Lab - mkabukcu
Timestamp: 2013-09-27 02:48:50

|  :scenario |                                    :title |                                   :result | :score |
|------------+-------------------------------------------+-------------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                      Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Fail: Student tests did not detect error. |      0 |
|    broke-3 |     Sorted insert doesn't recycle memory. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. |      Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. |      Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. |      Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                           |     95 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00455 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

........................

Finished in 0.00461 seconds
24 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF..............

Failures:

  1) insert-at-end creates a cons cell.
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with empty lists
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-1/spec/linked_lists/core_spec.clj:40

  3) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-1/spec/linked_lists/core_spec.clj:43

Finished in 0.03316 seconds
24 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

........................

Finished in 0.00453 seconds
24 examples, 0 failures


** Details for Sorted insert doesn't recycle memory.

..............F.........

Failures:

  1) sorted insert should not duplicate the remainder of the list after the insertion point.
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-3/spec/linked_lists/core_spec.clj:65

Finished in 0.00788 seconds
24 examples, 1 failures


** Details for Search doesn't handle base case.

.................F.....F

Failures:

  1) search should not find things that are not in the list.
     Expected falsy but was: true
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-4/spec/linked_lists/core_spec.clj:80

  2) efficient-delete should not duplicate a list if the victim is not in it.
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-4/spec/linked_lists/core_spec.clj:131

Finished in 0.02417 seconds
24 examples, 2 failures


** Details for Delete removes all copies.

..................F...F.

Failures:

  1) delete should delete things once that are in the list.
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-5/spec/linked_lists/core_spec.clj:90

  2) efficient-delete should delete things once that are in the list.
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-5/spec/linked_lists/core_spec.clj:124

Finished in 0.06791 seconds
24 examples, 2 failures


** Details for Delete doesn't.

..................F...F.

Failures:

  1) delete should delete things once that are in the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-6/spec/linked_lists/core_spec.clj:89

  2) efficient-delete should delete things once that are in the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-6/spec/linked_lists/core_spec.clj:123

Finished in 0.06382 seconds
24 examples, 2 failures


** Details for Delete all only deletes one.

....................F...

Failures:

  1) delete-all should delete things completely that are in the list.
     Expected: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}
          got: #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-7/spec/linked_lists/core_spec.clj:107

Finished in 0.05478 seconds
24 examples, 1 failures


** Details for Delete all truncates list.

....................F...

Failures:

  1) delete-all should delete things completely that are in the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-8/spec/linked_lists/core_spec.clj:106

Finished in 0.04902 seconds
24 examples, 1 failures


** Details for Efficient delete doesn't delete.

....................F.F.

Failures:

  1) delete-all should delete things completely that are in the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-9/spec/linked_lists/core_spec.clj:106

  2) efficient-delete should delete things once that are in the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-9/spec/linked_lists/core_spec.clj:123

Finished in 0.06477 seconds
24 examples, 2 failures


** Details for Efficient delete doesn't return original.

.......................F

Failures:

  1) efficient-delete should not duplicate a list if the victim is not in it.
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/mkabukcu/broke-10/spec/linked_lists/core_spec.clj:131

Finished in 0.01246 seconds
24 examples, 1 failures
