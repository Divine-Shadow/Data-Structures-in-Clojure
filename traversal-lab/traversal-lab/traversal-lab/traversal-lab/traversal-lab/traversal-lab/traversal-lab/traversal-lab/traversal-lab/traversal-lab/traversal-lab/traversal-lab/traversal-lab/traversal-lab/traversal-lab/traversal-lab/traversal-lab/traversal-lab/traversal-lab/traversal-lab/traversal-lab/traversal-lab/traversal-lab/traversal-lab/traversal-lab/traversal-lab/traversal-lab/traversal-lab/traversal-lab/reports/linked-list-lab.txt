Lab report for Linked List Lab - lgu6
Timestamp: 2013-10-02 16:36:14

|  :scenario |                                    :title |                              :result | :score |
|------------+-------------------------------------------+--------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. | Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. | Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. | Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. | Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.02110 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

............................

Finished in 0.00518 seconds
28 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF..................

Failures:

  1) insert-at-end should create a cons cell.
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/lgu6/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with empty list.
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-1/spec/linked_lists/core_spec.clj:39

  3) insert-at-end should add the elt at the end.
     Expected: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}
          got: #linked_lists.core.Cons{:car 5, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-1/spec/linked_lists/core_spec.clj:41

Finished in 0.03281 seconds
28 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

...........F................

Failures:

  1) sorted insert should insert at the right place.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-2/spec/linked_lists/core_spec.clj:48

Finished in 0.02584 seconds
28 examples, 1 failures


** Details for Sorted insert doesn't recycle memory.

............F...............

Failures:

  1) sorted insert should recycle the memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-3/spec/linked_lists/core_spec.clj:51

Finished in 0.00606 seconds
28 examples, 1 failures


** Details for Search doesn't handle base case.

.............F.F...........F

Failures:

  1) search should work with empty list.
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-4/spec/linked_lists/core_spec.clj:57

  2) search should work with a list without the element.
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-4/spec/linked_lists/core_spec.clj:63

  3) efficient-delete should recycle the memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-4/spec/linked_lists/core_spec.clj:107

Finished in 0.01124 seconds
28 examples, 3 failures


** Details for Delete removes all copies.

....................F.......

Failures:

  1) delete should only delete the first it encounters if there are multple element
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-5/spec/linked_lists/core_spec.clj:79

Finished in 0.02191 seconds
28 examples, 1 failures


** Details for Delete doesn't.

.................FF.F.....F.

Failures:

  1) delete should delete the element.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-6/spec/linked_lists/core_spec.clj:71

  2) delete should delte the element if the list is unsorted
     Expected: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 8, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-6/spec/linked_lists/core_spec.clj:73

  3) delete should only delete the first it encounters if there are multple element
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-6/spec/linked_lists/core_spec.clj:79

  4) efficient-delete should return the same as when u do a normal delete when it has the element.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-6/spec/linked_lists/core_spec.clj:104

Finished in 0.05554 seconds
28 examples, 4 failures


** Details for Delete all only deletes one.

......................F.....

Failures:

  1) delete-all should work if the element is in the list.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 8, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 8, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-7/spec/linked_lists/core_spec.clj:89

Finished in 0.04519 seconds
28 examples, 1 failures


** Details for Delete all truncates list.

......................F.....

Failures:

  1) delete-all should work if the element is in the list.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-8/spec/linked_lists/core_spec.clj:89

Finished in 0.05467 seconds
28 examples, 1 failures


** Details for Efficient delete doesn't delete.

......................F...F.

Failures:

  1) delete-all should work if the element is in the list.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-9/spec/linked_lists/core_spec.clj:89

  2) efficient-delete should return the same as when u do a normal delete when it has the element.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-9/spec/linked_lists/core_spec.clj:104

Finished in 0.05107 seconds
28 examples, 2 failures


** Details for Efficient delete doesn't return original.

...........................F

Failures:

  1) efficient-delete should recycle the memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/lgu6/broke-10/spec/linked_lists/core_spec.clj:107

Finished in 0.00678 seconds
28 examples, 1 failures
