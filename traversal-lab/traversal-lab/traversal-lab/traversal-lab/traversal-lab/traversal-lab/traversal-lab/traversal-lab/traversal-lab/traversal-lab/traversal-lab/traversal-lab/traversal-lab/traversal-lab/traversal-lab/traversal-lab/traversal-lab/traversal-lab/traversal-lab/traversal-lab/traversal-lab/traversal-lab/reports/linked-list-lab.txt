Lab report for Linked List Lab - morlowsk
Timestamp: 2013-09-30 15:59:19

|  :scenario |                                    :title |                                   :result | :score |
|------------+-------------------------------------------+-------------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                      Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Fail: Student tests did not detect error. |      0 |
|    broke-6 |                           Delete doesn't. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. |      Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. |      Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. |      Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                           |     95 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00466 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

...........................

Finished in 0.00724 seconds
27 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF.................

Failures:

  1) insert-at-end creates a cons cell.
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/morlowsk/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end handles empty lists.
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-1/spec/linked_lists/core_spec.clj:39

  3) insert-at-end handles full lists.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-1/spec/linked_lists/core_spec.clj:41

Finished in 0.04627 seconds
27 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

...........F.FF............

Failures:

  1) sorted-insert Should insert an element in the middle if the average.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 8, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 8, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-2/spec/linked_lists/core_spec.clj:48

  2) sorted-insert Should insert an element in the beginning if it's the smallest.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 1, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-2/spec/linked_lists/core_spec.clj:52

  3) sorted-insert Should put an element in the end if it's the biggest element.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-2/spec/linked_lists/core_spec.clj:54

Finished in 0.05292 seconds
27 examples, 3 failures


** Details for Sorted insert doesn't recycle memory.

...............F...........

Failures:

  1) sorted-insert Should recycle memory.
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-3/spec/linked_lists/core_spec.clj:57

Finished in 0.00632 seconds
27 examples, 1 failures


** Details for Search doesn't handle base case.

................F.........F

Failures:

  1) search should work with empty lists.
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-4/spec/linked_lists/core_spec.clj:63

  2) efficient-delete Should recycle memory.
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-4/spec/linked_lists/core_spec.clj:104

Finished in 0.00837 seconds
27 examples, 2 failures


** Details for Delete removes all copies.

...........................

Finished in 0.00560 seconds
27 examples, 0 failures


** Details for Delete doesn't.

..................FFFF..F..

Failures:

  1) delete should delete the item in an unsorted list.
     Expected: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-6/spec/linked_lists/core_spec.clj:75

  2) delete should delete one copy of the element if it's in the beginning of the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-6/spec/linked_lists/core_spec.clj:80

  3) delete should delete one copy of the element if it's in the middle of the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-6/spec/linked_lists/core_spec.clj:82

  4) delete should delete one copy of the element if it's in the end of the list.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-6/spec/linked_lists/core_spec.clj:84

  5) efficient-delete should return a copy of the element in the list.
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-6/spec/linked_lists/core_spec.clj:97

Finished in 0.06298 seconds
27 examples, 5 failures


** Details for Delete all only deletes one.

......................F....

Failures:

  1) delete-all should delete every copy of the item in the list.
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-7/spec/linked_lists/core_spec.clj:89

Finished in 0.06581 seconds
27 examples, 1 failures


** Details for Delete all truncates list.

......................F....

Failures:

  1) delete-all should delete every copy of the item in the list.
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-8/spec/linked_lists/core_spec.clj:89

Finished in 0.05832 seconds
27 examples, 1 failures


** Details for Efficient delete doesn't delete.

......................F.F..

Failures:

  1) delete-all should delete every copy of the item in the list.
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-9/spec/linked_lists/core_spec.clj:89

  2) efficient-delete should return a copy of the element in the list.
     Expected: #linked_lists.core.Cons{:car 5, :cdr nil}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-9/spec/linked_lists/core_spec.clj:97

Finished in 0.05369 seconds
27 examples, 2 failures


** Details for Efficient delete doesn't return original.

..........................F

Failures:

  1) efficient-delete Should recycle memory.
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/morlowsk/broke-10/spec/linked_lists/core_spec.clj:104

Finished in 0.00687 seconds
27 examples, 1 failures
