Lab report for Stack and Queue Lab - jying
Timestamp: 2013-10-13 13:27:24

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.00835 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

.....................

Finished in 0.00538 seconds
21 examples, 0 failures


** Details for Push doesn't increment size.

....FF...............

Failures:

  1) The push should work with stack with a size of 0
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-1/spec/fifolifo/core_spec.clj:33

  2) The push should work stack that have data
     Expected: #fifolifo.core.Stack{:top (3 4), :size 2}
          got: #fifolifo.core.Stack{:top (3 4), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-1/spec/fifolifo/core_spec.clj:36

Finished in 0.04729 seconds
21 examples, 2 failures


** Details for Pop of empty makes size negative.

......F..............

Failures:

  1) The pop should work with empty Stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-2/spec/fifolifo/core_spec.clj:41

Finished in 0.08763 seconds
21 examples, 1 failures


** Details for Pop doesn't remove elements.

.......F.............

Failures:

  1) The pop should work with Stacks that have data
     Expected: #fifolifo.core.Stack{:top (9 8 7), :size 3}
          got: #fifolifo.core.Stack{:top (10 9 8 7), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-3/spec/fifolifo/core_spec.clj:44

Finished in 0.03775 seconds
21 examples, 1 failures


** Details for Pop reverses elements.

.......F.F...........

Failures:

  1) The pop should work with Stacks that have data
     Expected: #fifolifo.core.Stack{:top (9 8 7), :size 3}
          got: #fifolifo.core.Stack{:top (10 9 8), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-4/spec/fifolifo/core_spec.clj:44

  2) The top should work with Stacks that have data
     Expected: 1
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-4/spec/fifolifo/core_spec.clj:54

Finished in 0.03296 seconds
21 examples, 2 failures


** Details for Enqueue doesn't increment size.

...............FF....

Failures:

  1) The enqueue should work with empty Queues
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-5/spec/fifolifo/core_spec.clj:82

  2) The enqueue should work with Queues that have data
     Expected: #fifolifo.core.Queue{:back (4 3), :front (1 2), :size 4}
          got: #fifolifo.core.Queue{:back (4 3), :front (1 2), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-5/spec/fifolifo/core_spec.clj:85

Finished in 0.04926 seconds
21 examples, 2 failures


** Details for Dequeue of empty makes size negative.

.................F...

Failures:

  1) The dequeue should work with empty Queues
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-6/spec/fifolifo/core_spec.clj:91

Finished in 0.03148 seconds
21 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

...................F.

Failures:

  1) The dequeue should work if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-7/spec/fifolifo/core_spec.clj:99

Finished in 0.03644 seconds
21 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFFF.F..FFFFFFFF.

Failures:

  1) The stack-size should have a size 0 of if Stack is empty
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:25

  2) The stack-size should return the size
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:28

  3) The push should work with stack with a size of 0
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:33

  4) The push should work stack that have data
     Expected: #fifolifo.core.Stack{:top (3 4), :size 2}
          got: #fifolifo.core.Stack{:top (3 [:top (4)] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:36

  5) The pop should work with empty Stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:41

  6) The pop should work with Stacks that have data
     Expected: #fifolifo.core.Stack{:top (9 8 7), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:44

  7) The top should work with Stacks that have data
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:54

  8) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:67

  9) The queue-size should work with empty Queues
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:73

  10) The queue-size should work with Queues that have data
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:76

  11) The enqueue should work with empty Queues
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:82

  12) The enqueue should work with Queues that have data
     Expected: #fifolifo.core.Queue{:back (4 3), :front (1 2), :size 4}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:85

  13) The dequeue should work with empty Queues
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:91

  14) The dequeue should work if :front has elements
     Expected: #fifolifo.core.Queue{:back (5 4 3), :front (2), :size 4}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:95

  15) The dequeue should work if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-8/spec/fifolifo/core_spec.clj:99

Finished in 0.14566 seconds
21 examples, 15 failures


** Details for Flipping doesn't erase back.

...................F.

Failures:

  1) The dequeue should work if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (3 2 1), :front (2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-9/spec/fifolifo/core_spec.clj:99

Finished in 0.10137 seconds
21 examples, 1 failures


** Details for Queue behaves like a stack.

..................FF.

Failures:

  1) The dequeue should work if :front has elements
     Expected: #fifolifo.core.Queue{:back (5 4 3), :front (2), :size 4}
          got: #fifolifo.core.Queue{:back (4 3), :front (1 2), :size 4} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-10/spec/fifolifo/core_spec.clj:95

  2) The dequeue should work if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (2 1), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/jying/broke-10/spec/fifolifo/core_spec.clj:99

Finished in 0.05611 seconds
21 examples, 2 failures
