Lab report for Stack and Queue Lab - bwalter4
Timestamp: 2013-10-16 20:00:31

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.00871 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

............................

Finished in 0.00509 seconds
28 examples, 0 failures


** Details for Push doesn't increment size.

...FF......................F

Failures:

  1) push should push an element onto a stack
     Expected: #fifolifo.core.Stack{:top (20 10), :size 2}
          got: #fifolifo.core.Stack{:top (20 10), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-1/spec/fifolifo/core_spec.clj:29

  2) push should work on an empty stack
     Expected: #fifolifo.core.Stack{:top (10), :size 1}
          got: #fifolifo.core.Stack{:top (10), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-1/spec/fifolifo/core_spec.clj:32

  3) stack-size should return stack size for a stack
     Expected: 2
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-1/spec/fifolifo/core_spec.clj:135

Finished in 0.07975 seconds
28 examples, 3 failures


** Details for Pop of empty makes size negative.

..............F.............

Failures:

  1) pop of empty should have size of zero
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-2/spec/fifolifo/core_spec.clj:72

Finished in 0.02585 seconds
28 examples, 1 failures


** Details for Pop doesn't remove elements.

.........F...F..............

Failures:

  1) pop should return an empty stack (with empty list NOT NULL) for a stack with one item
     Expected: #fifolifo.core.Stack{:top (), :size 0}
          got: #fifolifo.core.Stack{:top (10), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-3/spec/fifolifo/core_spec.clj:55

  2) pop should recycle the end of the list
     Expected truthy but was: false
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-3/spec/fifolifo/core_spec.clj:69

Finished in 0.09063 seconds
28 examples, 2 failures


** Details for Pop reverses elements.

.............F..............

Failures:

  1) pop should recycle the end of the list
     Expected truthy but was: false
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-4/spec/fifolifo/core_spec.clj:69

Finished in 0.00701 seconds
28 examples, 1 failures


** Details for Enqueue doesn't increment size.

....................FF......

Failures:

  1) enqueue should add an element to front of the :back list
     Expected: #fifolifo.core.Queue{:back (10 20), :front (), :size 2}
          got: #fifolifo.core.Queue{:back (10 20), :front (), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-5/spec/fifolifo/core_spec.clj:101

  2) enqueue should increment the size
     Expected: 3
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-5/spec/fifolifo/core_spec.clj:106

Finished in 0.07879 seconds
28 examples, 2 failures


** Details for Dequeue of empty makes size negative.

.......................F....

Failures:

  1) dequeue of empty should have size zero
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-6/spec/fifolifo/core_spec.clj:117

Finished in 0.01240 seconds
28 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

........................F...

Failures:

  1) dequeue should reverse the :back list and move it to :front w/out first item if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (20 10), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-7/spec/fifolifo/core_spec.clj:121

Finished in 0.10891 seconds
28 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFF.F.F.FFFF..FF.FFFFFFFF

Failures:

  1) The stack declaration (make-stack) should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:23

  2) push should push an element onto a stack
     Expected: #fifolifo.core.Stack{:top (20 10), :size 2}
          got: #fifolifo.core.Stack{:top (20 [:top (10 [:top nil] [:size 0])] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:29

  3) push should work on an empty stack
     Expected: #fifolifo.core.Stack{:top (10), :size 1}
          got: #fifolifo.core.Stack{:top (10 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:32

  4) push should recycle the end of the list
     Expected truthy but was: false
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:36

  5) top should return the top element - not a list
     Expected: 20
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:45

  6) pop should return an empty stack (with empty list NOT NULL) for a stack with one item
     Expected: #fifolifo.core.Stack{:top (), :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:55

  7) pop should return an stack type element
     Expected: fifolifo.core.Stack
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:61

  8) pop should decrement the counter
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:63

  9) pop should recycle the end of the list
     Expected truthy but was: false
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:69

  10) pop of empty should have size of zero
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:72

  11) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:86

  12) queue-size should return the size of the queue
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:91

  13) enqueue should add an element to front of the :back list
     Expected: #fifolifo.core.Queue{:back (10 20), :front (), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:101

  14) enqueue should increment the size
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:106

  15) dequeue should decrement the counter
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:113

  16) dequeue of empty should have size zero
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:117

  17) dequeue should reverse the :back list and move it to :front w/out first item if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:121

  18) dequeue should not touch the :back list if :front is not empty
     Expected: #fifolifo.core.Queue{:back (21 13), :front (8), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:125

  19) stack-size should return 0 for an empty stack
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:132

  20) stack-size should return stack size for a stack
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-8/spec/fifolifo/core_spec.clj:135

Finished in 0.16407 seconds
28 examples, 20 failures


** Details for Flipping doesn't erase back.

........................F...

Failures:

  1) dequeue should reverse the :back list and move it to :front w/out first item if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: #fifolifo.core.Queue{:back (30 20 10), :front (20 30), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-9/spec/fifolifo/core_spec.clj:121

Finished in 0.03870 seconds
28 examples, 1 failures


** Details for Queue behaves like a stack.

........................FF..

Failures:

  1) dequeue should reverse the :back list and move it to :front w/out first item if :front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: #fifolifo.core.Queue{:back (20 10), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-10/spec/fifolifo/core_spec.clj:121

  2) dequeue should not touch the :back list if :front is not empty
     Expected: #fifolifo.core.Queue{:back (21 13), :front (8), :size 3}
          got: #fifolifo.core.Queue{:back (13), :front (5 8), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/bwalter4/broke-10/spec/fifolifo/core_spec.clj:125

Finished in 0.03987 seconds
28 examples, 2 failures
