Lab report for Stack and Queue Lab - jfreeman
Timestamp: 2013-10-19 22:12:34

|  :scenario |                                  :title |                                   :result | :score |
|------------+-----------------------------------------+-------------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                      Fail |     40 |
| qualifying |   Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |            Push doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Fail: Student tests did not detect error. |      0 |
|    broke-8 | Dequeue doesn't dequeue after flipping. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Fail: Student tests did not detect error. |      0 |
|   broke-10 |             Queue behaves like a stack. | Fail: Student tests did not detect error. |      0 |
|      total |                             Total Score |                                           |     80 |

Details:


** Details for Test student code vs instructor tests

..................FF

Failures:

  1) Queues should pull things out in the correct order.
     Expected: 1
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/working/spec/fifolifo/core_spec.clj:105

  2) Queues should be able to enqueue things after dequeueping.
     Expected: (30 20 10 8 5)
          got: (nil 2 2 2 2) (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/working/spec/fifolifo/core_spec.clj:115

Finished in 0.11766 seconds
20 examples, 2 failures


** Details for Test student tests vs instructor code

..........

Finished in 0.00235 seconds
10 examples, 0 failures


** Details for Push doesn't increment size.

......F...

Failures:

  1) The pop function should remove element at top of stack
     Expected: #fifolifo.core.Stack{:top (30 20 10), :size 0}
          got: #fifolifo.core.Stack{:top (30 20 10), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-1/spec/fifolifo/core_spec.clj:41

Finished in 0.09050 seconds
10 examples, 1 failures


** Details for Pop of empty makes size negative.

.......F..

Failures:

  1) The pop function should not make size negaitve
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-2/spec/fifolifo/core_spec.clj:45

Finished in 0.01537 seconds
10 examples, 1 failures


** Details for Pop doesn't remove elements.

......F...

Failures:

  1) The pop function should remove element at top of stack
     Expected: #fifolifo.core.Stack{:top (30 20 10), :size 3}
          got: #fifolifo.core.Stack{:top (40 30 20 10), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-3/spec/fifolifo/core_spec.clj:41

Finished in 0.08712 seconds
10 examples, 1 failures


** Details for Pop reverses elements.

......F...

Failures:

  1) The pop function should remove element at top of stack
     Expected: #fifolifo.core.Stack{:top (30 20 10), :size 3}
          got: #fifolifo.core.Stack{:top (40 30 20), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-4/spec/fifolifo/core_spec.clj:41

Finished in 0.13979 seconds
10 examples, 1 failures


** Details for Enqueue doesn't increment size.

........F.

Failures:

  1) The enqueue function should increment size
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-5/spec/fifolifo/core_spec.clj:51

Finished in 0.01671 seconds
10 examples, 1 failures


** Details for Dequeue of empty makes size negative.

.........F

Failures:

  1) The dequeue function should not make size negaitve
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-6/spec/fifolifo/core_spec.clj:57

Finished in 0.01579 seconds
10 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

..........

Finished in 0.00254 seconds
10 examples, 0 failures


** Details for Dequeue doesn't dequeue after flipping.

..F..FFFFF

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-8/spec/fifolifo/core_spec.clj:21

  2) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-8/spec/fifolifo/core_spec.clj:34

  3) The pop function should remove element at top of stack
     Expected: #fifolifo.core.Stack{:top (30 [:top (20 [:top (10 [:top nil] [:size 0])] [:size 1])] [:size 2]), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-8/spec/fifolifo/core_spec.clj:41

  4) The pop function should not make size negaitve
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-8/spec/fifolifo/core_spec.clj:45

  5) The enqueue function should increment size
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-8/spec/fifolifo/core_spec.clj:51

  6) The dequeue function should not make size negaitve
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/jfreeman/broke-8/spec/fifolifo/core_spec.clj:57

Finished in 0.18304 seconds
10 examples, 6 failures


** Details for Flipping doesn't erase back.

..........

Finished in 0.00244 seconds
10 examples, 0 failures


** Details for Queue behaves like a stack.

..........

Finished in 0.00229 seconds
10 examples, 0 failures
