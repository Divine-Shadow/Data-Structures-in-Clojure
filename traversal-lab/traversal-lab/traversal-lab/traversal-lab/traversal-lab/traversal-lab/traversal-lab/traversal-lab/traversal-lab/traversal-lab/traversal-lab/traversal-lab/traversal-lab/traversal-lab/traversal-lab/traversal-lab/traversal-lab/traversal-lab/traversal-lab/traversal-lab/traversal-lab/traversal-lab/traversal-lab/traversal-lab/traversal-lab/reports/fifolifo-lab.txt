Lab report for Stack and Queue Lab - mdrews
Timestamp: 2013-10-16 16:11:34

|  :scenario |                                  :title |                                   :result | :score |
|------------+-----------------------------------------+-------------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                      Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |            Push doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Fail: Student tests did not detect error. |      0 |
|    broke-8 | Dequeue doesn't dequeue after flipping. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Fail: Student tests did not detect error. |      0 |
|   broke-10 |             Queue behaves like a stack. |      Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                           |     90 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.02087 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

......................

Finished in 0.00562 seconds
22 examples, 0 failures


** Details for Push doesn't increment size.

........FF............

Failures:

  1) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-1/spec/fifolifo/core_spec.clj:51

  2) push should work with stacks with data
     Expected: #fifolifo.core.Stack{:top (5 1 2 3), :size 4}
          got: #fifolifo.core.Stack{:top (5 1 2 3), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-1/spec/fifolifo/core_spec.clj:55

Finished in 0.04718 seconds
22 examples, 2 failures


** Details for Pop of empty makes size negative.

..........F...........

Failures:

  1) pop should work with empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-2/spec/fifolifo/core_spec.clj:63

Finished in 0.09777 seconds
22 examples, 1 failures


** Details for Pop doesn't remove elements.

...........F..........

Failures:

  1) pop should work with stacks with data
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: #fifolifo.core.Stack{:top (1 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-3/spec/fifolifo/core_spec.clj:67

Finished in 0.10737 seconds
22 examples, 1 failures


** Details for Pop reverses elements.

...........F.F........

Failures:

  1) pop should work with stacks with data
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: #fifolifo.core.Stack{:top (1 2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-4/spec/fifolifo/core_spec.clj:67

  2) top should work with stacks with data.
     Expected: 1
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-4/spec/fifolifo/core_spec.clj:79

Finished in 0.09576 seconds
22 examples, 2 failures


** Details for Enqueue doesn't increment size.

................FF....

Failures:

  1) enqueue should work with empty queues.
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-5/spec/fifolifo/core_spec.clj:99

  2) enqueue should work with queues with data.
     Expected: #fifolifo.core.Queue{:back (4 3 2 1), :front (1 2 3), :size 4}
          got: #fifolifo.core.Queue{:back (4 3 2 1), :front (1 2 3), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-5/spec/fifolifo/core_spec.clj:103

Finished in 0.04840 seconds
22 examples, 2 failures


** Details for Dequeue of empty makes size negative.

..................F...

Failures:

  1) dequeue should work with empty queues.
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-6/spec/fifolifo/core_spec.clj:111

Finished in 0.07996 seconds
22 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

......................

Finished in 0.00606 seconds
22 examples, 0 failures


** Details for Dequeue doesn't dequeue after flipping.

..F..F..FFFF.FFFFFFF.F

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:21

  2) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:34

  3) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:51

  4) push should work with stacks with data
     Expected: #fifolifo.core.Stack{:top (5 1 2 3), :size 4}
          got: #fifolifo.core.Stack{:top (5 [:top (1 2 3)] [:size 3]), :size 4} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:55

  5) pop should work with empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:63

  6) pop should work with stacks with data
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:67

  7) top should work with stacks with data.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:79

  8) queue-size should work with empty queues.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:87

  9) queue-size should work with queues with data.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:91

  10) enqueue should work with empty queues.
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:99

  11) enqueue should work with queues with data.
     Expected: #fifolifo.core.Queue{:back (4 3 2 1), :front (1 2 3), :size 4}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:103

  12) dequeue should work with empty queues.
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:111

  13) dequeue should work with queues with data.
     Expected: #fifolifo.core.Queue{:back (3 2 1), :front (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:115

  14) peek should work with queues with data.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-8/spec/fifolifo/core_spec.clj:127

Finished in 0.16469 seconds
22 examples, 14 failures


** Details for Flipping doesn't erase back.

......................

Finished in 0.00655 seconds
22 examples, 0 failures


** Details for Queue behaves like a stack.

...................F.F

Failures:

  1) dequeue should work with queues with data.
     Expected: #fifolifo.core.Queue{:back (3 2 1), :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (2 1), :front (1 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-10/spec/fifolifo/core_spec.clj:115

  2) peek should work with queues with data.
     Expected: 1
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/mdrews/broke-10/spec/fifolifo/core_spec.clj:127

Finished in 0.11833 seconds
22 examples, 2 failures
