Lab report for Linked List Lab - psurowka
Timestamp: 2013-10-02 20:26:30

|  :scenario |                                    :title |                                   :result | :score |
|------------+-------------------------------------------+-------------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                      Fail |     43 |
| qualifying |     Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Fail: Student tests did not detect error. |      0 |
|    broke-4 |          Search doesn't handle base case. | Fail: Student tests did not detect error. |      0 |
|    broke-5 |                Delete removes all copies. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Fail: Student tests did not detect error. |      0 |
|    broke-8 |                Delete all truncates list. | Fail: Student tests did not detect error. |      0 |
|    broke-9 |          Efficient delete doesn't delete. | Fail: Student tests did not detect error. |      0 |
|   broke-10 | Efficient delete doesn't return original. | Fail: Student tests did not detect error. |      0 |
|      total |                               Total Score |                                           |     68 |

Details:


** Details for Test student code vs instructor tests

......................F.

Failures:

  1) efficient-delete should delete things once that are in the list.
     Don't know how to create ISeq from: java.lang.Long
     java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long
     	... 4 stack levels elided ...
     	at linked_lists.core$efficient_delete.invoke(core.clj:95)
     	at linked_lists.core_spec$eval1384$fn__1385$fn__1390.invoke(/home/grader/quarry/linked-list-lab/psurowka/working/spec/linked_lists/core_spec.clj:117)
     	... 42 stack levels elided ...

Finished in 0.01491 seconds
24 examples, 1 failures


** Details for Test student tests vs instructor code

.............

Finished in 0.02013 seconds
13 examples, 0 failures


** Details for Insert at end mishandles nil.

.......F.....

Failures:

  1) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-1/spec/linked_lists/core_spec.clj:38

Finished in 0.06314 seconds
13 examples, 1 failures


** Details for Sorted insert sorts in reverse order.

........F....

Failures:

  1) sorted insert should insert data into lists with data
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-2/spec/linked_lists/core_spec.clj:43

Finished in 0.06378 seconds
13 examples, 1 failures


** Details for Sorted insert doesn't recycle memory.

.............

Finished in 0.01139 seconds
13 examples, 0 failures


** Details for Search doesn't handle base case.

.............

Finished in 0.02615 seconds
13 examples, 0 failures


** Details for Delete removes all copies.

..........FFF

Failures:

  1) delete should remove one element from a list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-5/spec/linked_lists/core_spec.clj:55

  2) delete-all should remove ALL same elements from a list.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-5/spec/linked_lists/core_spec.clj:61

  3) efficient-delete should delete a copy of the element.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-5/spec/linked_lists/core_spec.clj:67

Finished in 0.04860 seconds
13 examples, 3 failures


** Details for Delete doesn't.

..........FFF

Failures:

  1) delete should remove one element from a list
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-6/spec/linked_lists/core_spec.clj:55

  2) delete-all should remove ALL same elements from a list.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-6/spec/linked_lists/core_spec.clj:61

  3) efficient-delete should delete a copy of the element.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/psurowka/broke-6/spec/linked_lists/core_spec.clj:67

Finished in 0.02561 seconds
13 examples, 3 failures


** Details for Delete all only deletes one.

.............

Finished in 0.01029 seconds
13 examples, 0 failures


** Details for Delete all truncates list.

.............

Finished in 0.01594 seconds
13 examples, 0 failures


** Details for Efficient delete doesn't delete.

.............

Finished in 0.00437 seconds
13 examples, 0 failures


** Details for Efficient delete doesn't return original.

.............

Finished in 0.01479 seconds
13 examples, 0 failures
