Lab report for Stack and Queue Lab - lgu6
Timestamp: 2013-10-19 22:15:37

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.01259 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

..............................

Finished in 0.00491 seconds
30 examples, 0 failures


** Details for Push doesn't increment size.

.......F.F..FF................

Failures:

  1) stack-size test should return a number of a stack if it has data
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-1/spec/fifolifo/core_spec.clj:47

  2) push should increase the size by one when add  non nil elt
     Expected: 2
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-1/spec/fifolifo/core_spec.clj:57

  3) pop should only delete the first one of the stack
     Expected: #fifolifo.core.Stack{:top (3 2), :size 0}
          got: #fifolifo.core.Stack{:top (3 2), :size -2} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-1/spec/fifolifo/core_spec.clj:70

  4) pop should decrease the size when pop a stack
     Expected: 1
          got: -2 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-1/spec/fifolifo/core_spec.clj:73

Finished in 0.03120 seconds
30 examples, 4 failures


** Details for Pop of empty makes size negative.

...........F..................

Failures:

  1) pop should work with an empty stack
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -4} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-2/spec/fifolifo/core_spec.clj:67

Finished in 0.03347 seconds
30 examples, 1 failures


** Details for Pop doesn't remove elements.

..........F.F.................

Failures:

  1) push sould not change the previous data
     Expected: 3
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-3/spec/fifolifo/core_spec.clj:60

  2) pop should only delete the first one of the stack
     Expected: #fifolifo.core.Stack{:top (3 2), :size 2}
          got: #fifolifo.core.Stack{:top (0 1 3 2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-3/spec/fifolifo/core_spec.clj:70

Finished in 0.06159 seconds
30 examples, 2 failures


** Details for Pop reverses elements.

........F...F..F..............

Failures:

  1) push should add the elt in the firt place
     Expected: 1
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-4/spec/fifolifo/core_spec.clj:54

  2) pop should only delete the first one of the stack
     Expected: #fifolifo.core.Stack{:top (3 2), :size 2}
          got: #fifolifo.core.Stack{:top (0 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-4/spec/fifolifo/core_spec.clj:70

  3) top test should return a right top if there is a stack
     Expected: 6
          got: 4 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-4/spec/fifolifo/core_spec.clj:83

Finished in 0.04969 seconds
30 examples, 3 failures


** Details for Enqueue doesn't increment size.

................F.FFFFF..F..FF

Failures:

  1) queue-size test should return the right size if the back is not nil
     Expected: 2
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:90

  2) enqueue test should increase the size in the right amount
     Expected: 2
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:100

  3) enqueue test should not delete the previous elt
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:103

  4) enqueue test should not chnge the front if elt is not nil
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:106

  5) dequeue test should delete the peek value
     Expected: 15
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:113

  6) dequeue test should decrease the size by one
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:116

  7) dequeue test should delete the back when the front is empty
     Expected: #fifolifo.core.Queue{:back (3 2 15 10), :front nil, :size 0}
          got: #fifolifo.core.Queue{:back (3 2 15 10 5), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:125

  8) peek test is the first additional test for above
     Expected: 10
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:139

  9) peek test is the second additional test for above
     Expected: 10
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-5/spec/fifolifo/core_spec.clj:142

Finished in 0.05656 seconds
30 examples, 9 failures


** Details for Dequeue of empty makes size negative.

........................F.....

Failures:

  1) dequeue test dequeue an empty queue, the size remain 0
     Expected: 0
          got: -2 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-6/spec/fifolifo/core_spec.clj:122

Finished in 0.01562 seconds
30 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

.................F.FFF...F.F..

Failures:

  1) enqueue test should add to the back if the elt is not nil
     Expected: 5
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-7/spec/fifolifo/core_spec.clj:97

  2) enqueue test should not delete the previous elt
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-7/spec/fifolifo/core_spec.clj:103

  3) enqueue test should not chnge the front if elt is not nil
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-7/spec/fifolifo/core_spec.clj:106

  4) dequeue test should delete the peek value
     Expected: 15
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-7/spec/fifolifo/core_spec.clj:113

  5) dequeue test should delete the back when the front is empty
     Expected: #fifolifo.core.Queue{:back (3 2), :front (10), :size 3}
          got: #fifolifo.core.Queue{:back (3 2), :front (5), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-7/spec/fifolifo/core_spec.clj:125

  6) peek test should return the value that it will be deleted when dequeue is called
     Expected: 5
          got: 15 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-7/spec/fifolifo/core_spec.clj:136

Finished in 0.12867 seconds
30 examples, 6 failures


** Details for Dequeue doesn't dequeue after flipping.

..F..FFFFFFFFF.FFFFFFFF.F..FFF

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:25

  2) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:38

  3) stack-size test should return 0 for empty stack.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:44

  4) stack-size test should return a number of a stack if it has data
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:47

  5) push should add the elt in the firt place
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:54

  6) push should increase the size by one when add  non nil elt
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:57

  7) push sould not change the previous data
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:60

  8) pop should work with an empty stack
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:67

  9) pop should only delete the first one of the stack
     Expected: #fifolifo.core.Stack{:top (3 [:top (2 [:top nil] [:size 0])] [:size 1]), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:70

  10) pop should decrease the size when pop a stack
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:73

  11) top test should return a right top if there is a stack
     Expected: 6
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:83

  12) queue-size test should return the right size if the back is not nil
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:90

  13) enqueue test should add to the back if the elt is not nil
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:97

  14) enqueue test should increase the size in the right amount
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:100

  15) enqueue test should not delete the previous elt
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:103

  16) enqueue test should not chnge the front if elt is not nil
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:106

  17) dequeue test should delete the peek value
     Expected: 15
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:113

  18) dequeue test should decrease the size by one
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:116

  19) dequeue test dequeue an empty queue, the size remain 0
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:122

  20) peek test should return the value that it will be deleted when dequeue is called
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:136

  21) peek test is the first additional test for above
     Expected: 10
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:139

  22) peek test is the second additional test for above
     Expected: 10
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-8/spec/fifolifo/core_spec.clj:142

Finished in 0.19033 seconds
30 examples, 22 failures


** Details for Flipping doesn't erase back.

.........................F....

Failures:

  1) dequeue test should delete the back when the front is empty
     Expected: #fifolifo.core.Queue{:back (3 2 15 10), :front (15), :size 3}
          got: #fifolifo.core.Queue{:back (3 2 15 10 5), :front (15), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-9/spec/fifolifo/core_spec.clj:125

Finished in 0.09019 seconds
30 examples, 1 failures


** Details for Queue behaves like a stack.

.................F.FFF...F.F.F

Failures:

  1) enqueue test should add to the back if the elt is not nil
     Expected: 5
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:97

  2) enqueue test should not delete the previous elt
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:103

  3) enqueue test should not chnge the front if elt is not nil
     Expected: 3
          got: 10 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:106

  4) dequeue test should delete the peek value
     Expected: 15
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:113

  5) dequeue test should delete the back when the front is empty
     Expected: #fifolifo.core.Queue{:back (3 2 10), :front nil, :size 3}
          got: #fifolifo.core.Queue{:back (3 2 5), :front nil, :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:125

  6) peek test should return the value that it will be deleted when dequeue is called
     Expected: 5
          got: 15 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:136

  7) peek test is the second additional test for above
     Expected: 10
          got: 20 (using =)
     /home/grader/quarry/fifolifo-lab/lgu6/broke-10/spec/fifolifo/core_spec.clj:142

Finished in 0.03740 seconds
30 examples, 7 failures
