Lab report for Stack and Queue Lab - pzellera
Timestamp: 2013-10-21 14:40:22

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Fail |     40 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |     95 |

Details:


** Details for Test student code vs instructor tests

..................FF

Failures:

  1) Queues should pull things out in the correct order.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/working/spec/fifolifo/core_spec.clj:105

  2) Queues should be able to enqueue things after dequeueping.
     Expected: (30 20 10 8 5)
          got: (nil nil nil nil nil) (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/working/spec/fifolifo/core_spec.clj:115

Finished in 0.11474 seconds
20 examples, 2 failures


** Details for Test student tests vs instructor code

.............................

Finished in 0.00601 seconds
29 examples, 0 failures


** Details for Push doesn't increment size.

.....FF......................

Failures:

  1) push should work with empty list
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-1/spec/fifolifo/core_spec.clj:36

  2) push should with list with data
     Expected: #fifolifo.core.Stack{:top (4 1 2 3), :size 4}
          got: #fifolifo.core.Stack{:top (4 1 2 3), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-1/spec/fifolifo/core_spec.clj:40

Finished in 0.13984 seconds
29 examples, 2 failures


** Details for Pop of empty makes size negative.

.......F.....................

Failures:

  1) pop should work with lists with no data
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-2/spec/fifolifo/core_spec.clj:46

Finished in 0.05670 seconds
29 examples, 1 failures


** Details for Pop doesn't remove elements.

........F....................

Failures:

  1) pop should work with lists that have data
     Expected: #fifolifo.core.Stack{:top (2 3 4), :size 3}
          got: #fifolifo.core.Stack{:top (1 2 3 4), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-3/spec/fifolifo/core_spec.clj:49

Finished in 0.04989 seconds
29 examples, 1 failures


** Details for Pop reverses elements.

........F.F..................

Failures:

  1) pop should work with lists that have data
     Expected: #fifolifo.core.Stack{:top (2 3 4), :size 3}
          got: #fifolifo.core.Stack{:top (1 2 3), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-4/spec/fifolifo/core_spec.clj:49

  2) top should work with list with data
     Expected: 1
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-4/spec/fifolifo/core_spec.clj:59

Finished in 0.09492 seconds
29 examples, 2 failures


** Details for Enqueue doesn't increment size.

.................FFFF........

Failures:

  1) enqueue should work with queues with no data
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-5/spec/fifolifo/core_spec.clj:91

  2) enqueue should work with queues with data when back is nil
     Expected: #fifolifo.core.Queue{:back (4), :front (1 2 3), :size 4}
          got: #fifolifo.core.Queue{:back (4), :front (1 2 3), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-5/spec/fifolifo/core_spec.clj:95

  3) enqueue should work with queues with data when front is nil
     Expected: #fifolifo.core.Queue{:back (4 3 2 1), :front nil, :size 4}
          got: #fifolifo.core.Queue{:back (4 3 2 1), :front nil, :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-5/spec/fifolifo/core_spec.clj:98

  4) enqueue should work with queues with data in both
     Expected: #fifolifo.core.Queue{:back (5 4 3), :front (1 2), :size 5}
          got: #fifolifo.core.Queue{:back (5 4 3), :front (1 2), :size 4} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-5/spec/fifolifo/core_spec.clj:102

Finished in 0.13526 seconds
29 examples, 4 failures


** Details for Dequeue of empty makes size negative.

.....................F.......

Failures:

  1) dequeue should return same queue if empty
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-6/spec/fifolifo/core_spec.clj:108

Finished in 0.08815 seconds
29 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

......................F......

Failures:

  1) dequeue should work with data when front is nil
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-7/spec/fifolifo/core_spec.clj:112

Finished in 0.09977 seconds
29 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFFFF.F...FFFFFFFFFFFF.F.

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:21

  2) stack size should return if size is zero
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:27

  3) stack size should return size with data
     Expected: 4
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:30

  4) push should work with empty list
     Expected: #fifolifo.core.Stack{:top (1), :size 1}
          got: #fifolifo.core.Stack{:top (1 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:36

  5) push should with list with data
     Expected: #fifolifo.core.Stack{:top (4 1 2 3), :size 4}
          got: #fifolifo.core.Stack{:top (4 [:top (1 2 3)] [:size 3]), :size 4} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:40

  6) pop should work with lists with no data
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:46

  7) pop should work with lists that have data
     Expected: #fifolifo.core.Stack{:top (2 3 4), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:49

  8) top should work with list with data
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:59

  9) queue size should return 0 of make-queue
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:78

  10) queue size empty queue should have zero size
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:81

  11) queue size should return size of queue with data
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:84

  12) enqueue should work with queues with no data
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:91

  13) enqueue should work with queues with data when back is nil
     Expected: #fifolifo.core.Queue{:back (4), :front (1 2 3), :size 4}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:95

  14) enqueue should work with queues with data when front is nil
     Expected: #fifolifo.core.Queue{:back (4 3 2 1), :front nil, :size 4}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:98

  15) enqueue should work with queues with data in both
     Expected: #fifolifo.core.Queue{:back (5 4 3), :front (1 2), :size 5}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:102

  16) dequeue should return same queue if empty
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:108

  17) dequeue should work with data when front is nil
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:112

  18) dequeue should work with queue when back is nil
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:116

  19) dequeue should work with data in front and back
     Expected: #fifolifo.core.Queue{:back (3), :front (2), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:120

  20) dequeue should decrease in size
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:123

  21) peek should detect first elt in queue
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-8/spec/fifolifo/core_spec.clj:131

Finished in 0.28324 seconds
29 examples, 21 failures


** Details for Flipping doesn't erase back.

......................F......

Failures:

  1) dequeue should work with data when front is nil
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (3 2 1), :front (2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-9/spec/fifolifo/core_spec.clj:112

Finished in 0.04820 seconds
29 examples, 1 failures


** Details for Queue behaves like a stack.

......................FFF..F.

Failures:

  1) dequeue should work with data when front is nil
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (2 1), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-10/spec/fifolifo/core_spec.clj:112

  2) dequeue should work with queue when back is nil
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (), :front (1 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-10/spec/fifolifo/core_spec.clj:116

  3) dequeue should work with data in front and back
     Expected: #fifolifo.core.Queue{:back (3), :front (2), :size 2}
          got: #fifolifo.core.Queue{:back (), :front (1 2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-10/spec/fifolifo/core_spec.clj:120

  4) peek should detect first elt in queue
     Expected: 1
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/pzellera/broke-10/spec/fifolifo/core_spec.clj:131

Finished in 0.06304 seconds
29 examples, 4 failures
