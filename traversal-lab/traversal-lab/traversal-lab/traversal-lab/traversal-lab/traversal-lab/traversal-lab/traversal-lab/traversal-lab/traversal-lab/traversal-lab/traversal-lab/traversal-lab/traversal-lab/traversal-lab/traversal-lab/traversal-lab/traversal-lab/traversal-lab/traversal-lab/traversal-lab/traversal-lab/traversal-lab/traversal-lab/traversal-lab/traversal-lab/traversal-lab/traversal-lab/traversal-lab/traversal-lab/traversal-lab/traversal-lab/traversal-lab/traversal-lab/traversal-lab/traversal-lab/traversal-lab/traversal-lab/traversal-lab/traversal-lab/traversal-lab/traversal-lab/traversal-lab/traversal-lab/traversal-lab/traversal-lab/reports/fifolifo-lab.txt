Lab report for Stack and Queue Lab - dmarti22
Timestamp: 2013-10-21 19:53:05

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.00847 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

...........................

Finished in 0.00646 seconds
27 examples, 0 failures


** Details for Push doesn't increment size.

.......FFFFFF..............

Failures:

  1) stack-size should work with nonempty stacks.
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-1/spec/fifolifo/core_spec.clj:42

  2) stack-size should work with nonempty stacks.
     Expected: 2
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-1/spec/fifolifo/core_spec.clj:45

  3) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (5), :size 1}
          got: #fifolifo.core.Stack{:top (5), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-1/spec/fifolifo/core_spec.clj:49

  4) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (8), :size 1}
          got: #fifolifo.core.Stack{:top (8), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-1/spec/fifolifo/core_spec.clj:52

  5) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (3), :size 1}
          got: #fifolifo.core.Stack{:top (3), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-1/spec/fifolifo/core_spec.clj:55

  6) push should work with nonempty stacks
     Expected: #fifolifo.core.Stack{:top (4 3 [:top nil] [:size 0]), :size 2}
          got: #fifolifo.core.Stack{:top (4 3 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-1/spec/fifolifo/core_spec.clj:58

Finished in 0.21358 seconds
27 examples, 6 failures


** Details for Pop of empty makes size negative.

.............F.............

Failures:

  1) pop should work with empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-2/spec/fifolifo/core_spec.clj:62

Finished in 0.09794 seconds
27 examples, 1 failures


** Details for Pop doesn't remove elements.

..............F............

Failures:

  1) pop should work with nonempty stacks
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (5 2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-3/spec/fifolifo/core_spec.clj:65

Finished in 0.12348 seconds
27 examples, 1 failures


** Details for Pop reverses elements.

..............F.F..........

Failures:

  1) pop should work with nonempty stacks
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (5), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-4/spec/fifolifo/core_spec.clj:65

  2) top should work with nonempty stacks
     Expected: 5
          got: [:size 2] (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-4/spec/fifolifo/core_spec.clj:72

Finished in 0.08519 seconds
27 examples, 2 failures


** Details for Enqueue doesn't increment size.

...................FF......

Failures:

  1) enqueue should work with empty queues
     Expected: #fifolifo.core.Queue{:back (2), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (2), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-5/spec/fifolifo/core_spec.clj:83

  2) enqueue should work with nonempty queues
     Expected: #fifolifo.core.Queue{:back (4 5), :front (2), :size 3}
          got: #fifolifo.core.Queue{:back (4 5), :front (2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-5/spec/fifolifo/core_spec.clj:86

Finished in 0.09040 seconds
27 examples, 2 failures


** Details for Dequeue of empty makes size negative.

.....................F.....

Failures:

  1) dequeue should work with empty queues
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-6/spec/fifolifo/core_spec.clj:90

Finished in 0.06495 seconds
27 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

.......................F..F

Failures:

  1) dequeue should work if the front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (4 5), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (4 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-7/spec/fifolifo/core_spec.clj:95

  2) peek should work if the front is empty
     Expected: 6
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-7/spec/fifolifo/core_spec.clj:103

Finished in 0.03485 seconds
27 examples, 2 failures


** Details for Dequeue doesn't dequeue after flipping.

..F..FFFFFFFFFF.FFFFFFFF.FF

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:21

  2) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:34

  3) stack-size should work with empty stacks.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:39

  4) stack-size should work with nonempty stacks.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:42

  5) stack-size should work with nonempty stacks.
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:45

  6) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (5), :size 1}
          got: #fifolifo.core.Stack{:top (5 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:49

  7) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (8), :size 1}
          got: #fifolifo.core.Stack{:top (8 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:52

  8) push should work with empty stacks
     Expected: #fifolifo.core.Stack{:top (3), :size 1}
          got: #fifolifo.core.Stack{:top (3 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:55

  9) push should work with nonempty stacks
     Expected: #fifolifo.core.Stack{:top (4 3 [:top nil] [:size 0]), :size 2}
          got: #fifolifo.core.Stack{:top (4 [:top (3 [:top nil] [:size 0])] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:58

  10) pop should work with empty stacks
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:62

  11) pop should work with nonempty stacks
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:65

  12) top should work with nonempty stacks
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:72

  13) queue size should work with empty queues
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:76

  14) queue size should work with nonempty stacks
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:79

  15) enqueue should work with empty queues
     Expected: #fifolifo.core.Queue{:back (2), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:83

  16) enqueue should work with nonempty queues
     Expected: #fifolifo.core.Queue{:back (4 5), :front (2), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:86

  17) dequeue should work with empty queues
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:90

  18) dequeue should work for queues that have data
     Expected: #fifolifo.core.Queue{:back (5 4), :front (), :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:93

  19) dequeue should work if the front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (4 5), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:95

  20) peek should work with nonempty queues
     Expected: 4
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:101

  21) peek should work if the front is empty
     Expected: 6
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-8/spec/fifolifo/core_spec.clj:103

Finished in 0.27235 seconds
27 examples, 21 failures


** Details for Flipping doesn't erase back.

.......................F...

Failures:

  1) dequeue should work if the front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (4 5), :size 2}
          got: #fifolifo.core.Queue{:back (5 4 3), :front (4 5), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-9/spec/fifolifo/core_spec.clj:95

Finished in 0.10712 seconds
27 examples, 1 failures


** Details for Queue behaves like a stack.

......................FF.FF

Failures:

  1) dequeue should work for queues that have data
     Expected: #fifolifo.core.Queue{:back (5 4), :front (), :size 1}
          got: #fifolifo.core.Queue{:back (4), :front (4), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-10/spec/fifolifo/core_spec.clj:93

  2) dequeue should work if the front is empty
     Expected: #fifolifo.core.Queue{:back nil, :front (4 5), :size 2}
          got: #fifolifo.core.Queue{:back (4 3), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-10/spec/fifolifo/core_spec.clj:95

  3) peek should work with nonempty queues
     Expected: 4
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-10/spec/fifolifo/core_spec.clj:101

  4) peek should work if the front is empty
     Expected: 6
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/dmarti22/broke-10/spec/fifolifo/core_spec.clj:103

Finished in 0.17070 seconds
27 examples, 4 failures
