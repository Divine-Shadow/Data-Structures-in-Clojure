Lab report for Linked List Lab - aeng1
Timestamp: 2013-09-27 01:31:46

|  :scenario |                                    :title |                              :result | :score |
|------------+-------------------------------------------+--------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. | Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. | Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. | Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. | Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00538 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

...............................

Finished in 0.00568 seconds
31 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF.....................

Failures:

  1) insert-at-end creates a cons cell
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/aeng1/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with empty lists
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-1/spec/linked_lists/core_spec.clj:40

  3) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-1/spec/linked_lists/core_spec.clj:44

Finished in 0.06705 seconds
31 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

............FFFF...............

Failures:

  1) sorted insert should work with a list
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-2/spec/linked_lists/core_spec.clj:55

  2) sorted insert should work when element is the lowest value
     Expected: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 5, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-2/spec/linked_lists/core_spec.clj:59

  3) sorted insert should work when element is the greatest value
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 35, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 35, :cdr #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-2/spec/linked_lists/core_spec.clj:63

  4) sorted insert should work when element is not the lowest nor the greatest value
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 25, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 25, :cdr #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-2/spec/linked_lists/core_spec.clj:67

Finished in 0.04186 seconds
31 examples, 4 failures


** Details for Sorted insert doesn't recycle memory.

................F..............

Failures:

  1) sorted insert should recycle memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-3/spec/linked_lists/core_spec.clj:71

Finished in 0.01541 seconds
31 examples, 1 failures


** Details for Search doesn't handle base case.

.................F.F.........F.

Failures:

  1) search should work with empty lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-4/spec/linked_lists/core_spec.clj:77

  2) search should work with a list that DOES NOT have the element
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-4/spec/linked_lists/core_spec.clj:83

  3) efficient-delete should return the original list if the element is not found
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-4/spec/linked_lists/core_spec.clj:126

Finished in 0.00785 seconds
31 examples, 3 failures


** Details for Delete removes all copies.

..............................F

Failures:

  1) efficient-delete should delete a copy of the target elements from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-5/spec/linked_lists/core_spec.clj:130

Finished in 0.06642 seconds
31 examples, 1 failures


** Details for Delete doesn't.

.....................F.FFF....F

Failures:

  1) delete should delete the element from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-6/spec/linked_lists/core_spec.clj:92

  2) delete should delete one copy of the element that is located in the beginning of the list
     Expected: #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 33, :cdr #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 50, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 33, :cdr #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 50, :cdr nil}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-6/spec/linked_lists/core_spec.clj:100

  3) delete should delete one copy of the element that is located in the middle of the list
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 50, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 33, :cdr #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 50, :cdr nil}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-6/spec/linked_lists/core_spec.clj:104

  4) delete should delete one copy of the element that is located at the end of the list
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 33, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 33, :cdr #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 50, :cdr nil}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-6/spec/linked_lists/core_spec.clj:108

  5) efficient-delete should delete a copy of the target elements from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-6/spec/linked_lists/core_spec.clj:130

Finished in 0.05391 seconds
31 examples, 5 failures


** Details for Delete all only deletes one.

...........................F...

Failures:

  1) delete-all should delete all of the target elements from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-7/spec/linked_lists/core_spec.clj:117

Finished in 0.05858 seconds
31 examples, 1 failures


** Details for Delete all truncates list.

...........................F...

Failures:

  1) delete-all should delete all of the target elements from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-8/spec/linked_lists/core_spec.clj:117

Finished in 0.04874 seconds
31 examples, 1 failures


** Details for Efficient delete doesn't delete.

...........................F..F

Failures:

  1) delete-all should delete all of the target elements from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-9/spec/linked_lists/core_spec.clj:117

  2) efficient-delete should delete a copy of the target elements from an unsorted list
     Expected: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}}}
          got: #linked_lists.core.Cons{:car 40, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 99, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 55, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 10, :cdr nil}}}}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-9/spec/linked_lists/core_spec.clj:130

Finished in 0.05894 seconds
31 examples, 2 failures


** Details for Efficient delete doesn't return original.

.............................F.

Failures:

  1) efficient-delete should return the original list if the element is not found
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/aeng1/broke-10/spec/linked_lists/core_spec.clj:126

Finished in 0.00679 seconds
31 examples, 1 failures
