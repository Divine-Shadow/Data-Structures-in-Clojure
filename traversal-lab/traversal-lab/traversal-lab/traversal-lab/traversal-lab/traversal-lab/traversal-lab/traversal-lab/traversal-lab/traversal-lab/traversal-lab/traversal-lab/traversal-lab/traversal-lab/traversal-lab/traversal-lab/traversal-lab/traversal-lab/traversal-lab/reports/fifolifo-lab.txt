Lab report for Stack and Queue Lab - nabraha5
Timestamp: 2013-10-15 16:14:41

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.01249 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

.....................

Finished in 0.00465 seconds
21 examples, 0 failures


** Details for Push doesn't increment size.

....FF.F.............

Failures:

  1) stack-size should return the size of a stack
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-1/spec/fifolifo/core_spec.clj:35

  2) push should add an element to a stack
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-1/spec/fifolifo/core_spec.clj:43

  3) pop should remove an element from the stack
     Expected: 1
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-1/spec/fifolifo/core_spec.clj:55

Finished in 0.01767 seconds
21 examples, 3 failures


** Details for Pop of empty makes size negative.

.........F...........

Failures:

  1) pop should not have a negative stack size
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-2/spec/fifolifo/core_spec.clj:63

Finished in 0.02306 seconds
21 examples, 1 failures


** Details for Pop doesn't remove elements.

........F............

Failures:

  1) pop should remove the top element from the stack
     Expected: 1
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-3/spec/fifolifo/core_spec.clj:59

Finished in 0.01838 seconds
21 examples, 1 failures


** Details for Pop reverses elements.

........F............

Failures:

  1) pop should remove the top element from the stack
     Expected: 1
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-4/spec/fifolifo/core_spec.clj:59

Finished in 0.01912 seconds
21 examples, 1 failures


** Details for Enqueue doesn't increment size.

...............FFF...

Failures:

  1) queue-size should return the size of the queue
     Expected: 1
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-5/spec/fifolifo/core_spec.clj:97

  2) enqueue should add an element to the back of a queue
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-5/spec/fifolifo/core_spec.clj:105

  3) dequeue should remove an element from the front of the queue
     Expected: #fifolifo.core.Queue{:back nil, :front (), :size 0}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-5/spec/fifolifo/core_spec.clj:113

Finished in 0.14173 seconds
21 examples, 3 failures


** Details for Dequeue of empty makes size negative.

..................F..

Failures:

  1) dequeue should not have a negative stack size
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-6/spec/fifolifo/core_spec.clj:117

Finished in 0.02242 seconds
21 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

...................F.

Failures:

  1) dequeue should reverse when flipping 1
     Expected: (3 2 1)
          got: (2 3 4) (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-7/spec/fifolifo/core_spec.clj:121

Finished in 0.06438 seconds
21 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..F.FFFFFFF..F.FFFFFF

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:21

  2) stack-size should return the size of a stack
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:35

  3) push should add an element to a stack
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:43

  4) push should have the element pushed on the top
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:47

  5) pop should remove an element from the stack
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:55

  6) pop should remove the top element from the stack
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:59

  7) pop should not have a negative stack size
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:63

  8) top should return the top element from a stack
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:70

  9) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:83

  10) queue-size should return the size of the queue
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:97

  11) enqueue should add an element to the back of a queue
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:105

  12) dequeue should remove an element from the front of the queue
     Expected: #fifolifo.core.Queue{:back nil, :front (), :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:113

  13) dequeue should not have a negative stack size
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:117

  14) dequeue should reverse when flipping 1
     Expected: (3 2 1)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:121

  15) peek should return the next element that will come out the front of the queue
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-8/spec/fifolifo/core_spec.clj:129

Finished in 0.12759 seconds
21 examples, 15 failures


** Details for Flipping doesn't erase back.

.................F...

Failures:

  1) dequeue should remove an element from the front of the queue
     Expected: #fifolifo.core.Queue{:back nil, :front (), :size 0}
          got: #fifolifo.core.Queue{:back (1), :front (), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-9/spec/fifolifo/core_spec.clj:113

Finished in 0.08755 seconds
21 examples, 1 failures


** Details for Queue behaves like a stack.

.................F.F.

Failures:

  1) dequeue should remove an element from the front of the queue
     Expected: #fifolifo.core.Queue{:back nil, :front (), :size 0}
          got: #fifolifo.core.Queue{:back (), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-10/spec/fifolifo/core_spec.clj:113

  2) dequeue should reverse when flipping 1
     Expected: (3 2 1)
          got: () (using =)
     /home/grader/quarry/fifolifo-lab/nabraha5/broke-10/spec/fifolifo/core_spec.clj:121

Finished in 0.10943 seconds
21 examples, 2 failures
