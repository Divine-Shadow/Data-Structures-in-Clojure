Lab report for Linked List Lab - phadlaw
Timestamp: 2013-10-03 00:41:13

|  :scenario |                                    :title |                              :result | :score |
|------------+-------------------------------------------+--------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. | Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. | Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. | Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. | Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. | Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. | Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. | Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Pass: Student tests detected errors. |      5 |
|    broke-9 |          Efficient delete doesn't delete. | Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Pass: Student tests detected errors. |      5 |
|      total |                               Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00519 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

.........................

Finished in 0.00588 seconds
25 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF...............

Failures:

  1) insert-at-end creates a cons cell
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/phadlaw/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with empty lists
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-1/spec/linked_lists/core_spec.clj:39

  3) insert-at-end should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-1/spec/linked_lists/core_spec.clj:42

Finished in 0.05287 seconds
25 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

............F............

Failures:

  1) sorted insert should work with lists that have data
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-2/spec/linked_lists/core_spec.clj:52

Finished in 0.05465 seconds
25 examples, 1 failures


** Details for Sorted insert doesn't recycle memory.

.............F...........

Failures:

  1) sorted insert should recycle memory
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-3/spec/linked_lists/core_spec.clj:55

Finished in 0.00789 seconds
25 examples, 1 failures


** Details for Search doesn't handle base case.

..............F.F......F.

Failures:

  1) search should work with empty lists
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-4/spec/linked_lists/core_spec.clj:60

  2) search should return false if an element does not exist
     Expected: false
          got: true (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-4/spec/linked_lists/core_spec.clj:64

  3) efficient-delete should return the original if the element does not exist
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-4/spec/linked_lists/core_spec.clj:88

Finished in 0.01455 seconds
25 examples, 3 failures


** Details for Delete removes all copies.

...................F.....

Failures:

  1) delete should not delete all elements matching
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-5/spec/linked_lists/core_spec.clj:73

Finished in 0.06292 seconds
25 examples, 1 failures


** Details for Delete doesn't.

..................FF....F

Failures:

  1) delete should delete an element from a list if it exists
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-6/spec/linked_lists/core_spec.clj:71

  2) delete should not delete all elements matching
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-6/spec/linked_lists/core_spec.clj:73

  3) efficient-delete should delete one copy if at least one is found.
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-6/spec/linked_lists/core_spec.clj:90

Finished in 0.05077 seconds
25 examples, 3 failures


** Details for Delete all only deletes one.

.....................F...

Failures:

  1) delete-all should delete all elements from a lists that match 
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 20, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-7/spec/linked_lists/core_spec.clj:80

Finished in 0.05573 seconds
25 examples, 1 failures


** Details for Delete all truncates list.

.....................F...

Failures:

  1) delete-all should delete all elements from a lists that match 
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}
          got: #linked_lists.core.Cons{:car 10, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-8/spec/linked_lists/core_spec.clj:80

Finished in 0.04464 seconds
25 examples, 1 failures


** Details for Efficient delete doesn't delete.

.....................F..F

Failures:

  1) delete-all should delete all elements from a lists that match 
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}
          got: #linked_lists.core.Cons{:car 10, :cdr nil} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-9/spec/linked_lists/core_spec.clj:80

  2) efficient-delete should delete one copy if at least one is found.
     Expected: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 10, :cdr #linked_lists.core.Cons{:car 20, :cdr #linked_lists.core.Cons{:car 30, :cdr #linked_lists.core.Cons{:car 40, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-9/spec/linked_lists/core_spec.clj:90

Finished in 0.05544 seconds
25 examples, 2 failures


** Details for Efficient delete doesn't return original.

.......................F.

Failures:

  1) efficient-delete should return the original if the element does not exist
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/phadlaw/broke-10/spec/linked_lists/core_spec.clj:88

Finished in 0.00664 seconds
25 examples, 1 failures
