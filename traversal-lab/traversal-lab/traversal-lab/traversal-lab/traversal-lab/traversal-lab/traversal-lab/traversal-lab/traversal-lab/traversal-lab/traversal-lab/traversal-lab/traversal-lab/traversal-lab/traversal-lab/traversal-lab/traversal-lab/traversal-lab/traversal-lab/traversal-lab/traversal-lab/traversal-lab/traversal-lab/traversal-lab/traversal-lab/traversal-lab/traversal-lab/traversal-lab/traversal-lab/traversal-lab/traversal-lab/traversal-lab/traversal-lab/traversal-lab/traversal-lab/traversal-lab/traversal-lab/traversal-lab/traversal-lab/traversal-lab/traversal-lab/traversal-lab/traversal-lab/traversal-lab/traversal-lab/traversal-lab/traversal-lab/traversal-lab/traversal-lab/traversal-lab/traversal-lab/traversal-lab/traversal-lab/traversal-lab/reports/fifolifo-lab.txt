Lab report for Stack and Queue Lab - aeng1
Timestamp: 2013-10-18 15:56:32

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.01072 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

..............................

Finished in 0.00442 seconds
30 examples, 0 failures


** Details for Push doesn't increment size.

........F..F.F..............FF

Failures:

  1) The push function should show the correct size of the new stack.
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-1/spec/fifolifo/core_spec.clj:54

  2) The pop function should remove the top element of the stack with data
     Expected: #fifolifo.core.Stack{:top (4 3), :size 0}
          got: #fifolifo.core.Stack{:top (4 3), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-1/spec/fifolifo/core_spec.clj:69

  3) The pop function should show the correct size of the new stack
     Expected: 2
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-1/spec/fifolifo/core_spec.clj:77

  4) The stack-size function should not have size 0 if the stack isn't empty.
     Expected: 0
     not to =: 0
     /home/grader/quarry/fifolifo-lab/aeng1/broke-1/spec/fifolifo/core_spec.clj:158

  5) The stack-size function should show the size of a stack with data.
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-1/spec/fifolifo/core_spec.clj:162

Finished in 0.07720 seconds
30 examples, 5 failures


** Details for Pop of empty makes size negative.

.........F....................

Failures:

  1) The pop function should return the original stack if the stack is empty.
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-2/spec/fifolifo/core_spec.clj:62

Finished in 0.03098 seconds
30 examples, 1 failures


** Details for Pop doesn't remove elements.

.......F..FFF.................

Failures:

  1) The push function should have the first added element at the end of the stack.
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-3/spec/fifolifo/core_spec.clj:47

  2) The pop function should return an empty stack if the original stack only had one element.
     Expected: true
          got: false (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-3/spec/fifolifo/core_spec.clj:65

  3) The pop function should remove the top element of the stack with data
     Expected: #fifolifo.core.Stack{:top (4 3), :size 2}
          got: #fifolifo.core.Stack{:top (5 4 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-3/spec/fifolifo/core_spec.clj:69

  4) The pop function should have the next element at the top in the returned stack.
     Expected: 4
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-3/spec/fifolifo/core_spec.clj:73

Finished in 0.07251 seconds
30 examples, 4 failures


** Details for Pop reverses elements.

....F..F...F..................

Failures:

  1) The top function should return the element at the top of a stack with data
     Expected: 5
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-4/spec/fifolifo/core_spec.clj:31

  2) The push function should have the first added element at the end of the stack.
     Expected: 3
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-4/spec/fifolifo/core_spec.clj:47

  3) The pop function should remove the top element of the stack with data
     Expected: #fifolifo.core.Stack{:top (4 3), :size 2}
          got: #fifolifo.core.Stack{:top (5 4), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-4/spec/fifolifo/core_spec.clj:69

Finished in 0.09244 seconds
30 examples, 3 failures


** Details for Enqueue doesn't increment size.

..................FF....FF....

Failures:

  1) The queue-size function should not have size 0 if the queue isn't empty.
     Expected: 0
     not to =: 0
     /home/grader/quarry/fifolifo-lab/aeng1/broke-5/spec/fifolifo/core_spec.clj:99

  2) The queue-size function should show the size of the queue with data.
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-5/spec/fifolifo/core_spec.clj:102

  3) The enqueue function should have recorded the correct size of the queue
     Expected: 3
          got: 0 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-5/spec/fifolifo/core_spec.clj:121

  4) The dequeue function should check if back list is emptied.
     Expected: nil
          got: (6) (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-5/spec/fifolifo/core_spec.clj:126

Finished in 0.07495 seconds
30 examples, 4 failures


** Details for Dequeue of empty makes size negative.

..........................F...

Failures:

  1) The dequeue function should not create negative queue sizes.
     Expected: 0
          got: -1 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-6/spec/fifolifo/core_spec.clj:130

Finished in 0.02917 seconds
30 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

......................F.......

Failures:

  1) The enqueue function should have the 'oldest' element at the top.
     Expected: 4
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-7/spec/fifolifo/core_spec.clj:115

Finished in 0.01452 seconds
30 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..F.F.FFFF.FFF..FF.F.FFFF.FF.F

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:21

  2) The top function should return the element at the top of a stack with data
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:31

  3) The push function should add element at the top of the stack.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:43

  4) The push function should have the first added element at the end of the stack.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:47

  5) The push function should show the correct size of the new stack.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:54

  6) The pop function should return the original stack if the stack is empty.
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:62

  7) The pop function should remove the top element of the stack with data
     Expected: #fifolifo.core.Stack{:top (4 [:top (3 [:top nil] [:size 0])] [:size 1]), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:69

  8) The pop function should have the next element at the top in the returned stack.
     Expected: 4
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:73

  9) The pop function should show the correct size of the new stack
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:77

  10) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:90

  11) The queue-size function should have size 0 if the queue is empty.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:96

  12) The queue-size function should show the size of the queue with data.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:102

  13) The enqueue function should add elements to the back of the queue
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:112

  14) The enqueue function should have the 'oldest' element at the top.
     Expected: 4
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:115

  15) The enqueue function should continue adding new elements to the back after a dequeue
     Expected: 5
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:118

  16) The enqueue function should have recorded the correct size of the queue
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:121

  17) The dequeue function should not create negative queue sizes.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:130

  18) The stack-size function should show that an empty stack has size 0.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:154

  19) The stack-size function should show the size of a stack with data.
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-8/spec/fifolifo/core_spec.clj:162

Finished in 0.11653 seconds
30 examples, 19 failures


** Details for Flipping doesn't erase back.

.........................F....

Failures:

  1) The dequeue function should check if back list is emptied.
     Expected: nil
          got: (6) (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-9/spec/fifolifo/core_spec.clj:126

Finished in 0.02782 seconds
30 examples, 1 failures


** Details for Queue behaves like a stack.

......................F..F....

Failures:

  1) The enqueue function should have the 'oldest' element at the top.
     Expected: 4
          got: 5 (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-10/spec/fifolifo/core_spec.clj:115

  2) The dequeue function should check if back list is emptied.
     Expected: nil
          got: () (using =)
     /home/grader/quarry/fifolifo-lab/aeng1/broke-10/spec/fifolifo/core_spec.clj:126

Finished in 0.03679 seconds
30 examples, 2 failures
