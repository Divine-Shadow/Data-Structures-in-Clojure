Lab report for Stack and Queue Lab - aariaz
Timestamp: 2013-10-21 20:27:42

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Fail |     40 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |     95 |

Details:


** Details for Test student code vs instructor tests

..................FF

Failures:

  1) Queues should pull things out in the correct order.
     Expected: (8 5 3 2 1)
          got: (nil nil nil nil 1) (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/working/spec/fifolifo/core_spec.clj:107

  2) Queues should be able to enqueue things after dequeueping.
     Expected: (30 20 10 8 5)
          got: (nil nil nil nil nil) (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/working/spec/fifolifo/core_spec.clj:115

Finished in 0.08017 seconds
20 examples, 2 failures


** Details for Test student tests vs instructor code

.............................

Finished in 0.00609 seconds
29 examples, 0 failures


** Details for Push doesn't increment size.

.....FF......................

Failures:

  1) The push function should push correctly
     Expected: #fifolifo.core.Stack{:top (1 2 3), :size 3}
          got: #fifolifo.core.Stack{:top (1 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-1/spec/fifolifo/core_spec.clj:37

  2) The push function should incement size when pushed
     Expected: 3
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-1/spec/fifolifo/core_spec.clj:41

Finished in 0.05805 seconds
29 examples, 2 failures


** Details for Pop of empty makes size negative.

...........F.................

Failures:

  1) The pop function should work with nil
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-2/spec/fifolifo/core_spec.clj:63

Finished in 0.09616 seconds
29 examples, 1 failures


** Details for Pop doesn't remove elements.

........F.F..................

Failures:

  1) The pop function should remove correctly
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: #fifolifo.core.Stack{:top (1 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-3/spec/fifolifo/core_spec.clj:52

  2) The pop function should remoce the front of the top
     Expected: (2 3)
          got: (1 2 3) (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-3/spec/fifolifo/core_spec.clj:60

Finished in 0.10345 seconds
29 examples, 2 failures


** Details for Pop reverses elements.

........F.F.F................

Failures:

  1) The pop function should remove correctly
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: #fifolifo.core.Stack{:top (1 2), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-4/spec/fifolifo/core_spec.clj:52

  2) The pop function should remoce the front of the top
     Expected: (2 3)
          got: (1 2) (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-4/spec/fifolifo/core_spec.clj:60

  3) The top function should return the top
     Expected: 1
          got: 3 (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-4/spec/fifolifo/core_spec.clj:70

Finished in 0.03373 seconds
29 examples, 3 failures


** Details for Enqueue doesn't increment size.

...................FF........

Failures:

  1) The nequeue function should add an element to the back
     Expected: #fifolifo.core.Queue{:back (5 1 2 3), :front nil, :size 4}
          got: #fifolifo.core.Queue{:back (5 1 2 3), :front nil, :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-5/spec/fifolifo/core_spec.clj:101

  2) The nequeue function should add and element to an empty queue
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-5/spec/fifolifo/core_spec.clj:104

Finished in 0.20445 seconds
29 examples, 2 failures


** Details for Dequeue of empty makes size negative.

........................F....

Failures:

  1) The dequeue function should work with nil
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-6/spec/fifolifo/core_spec.clj:122

Finished in 0.09350 seconds
29 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

.....................F....F..

Failures:

  1) The dequeue function should remove an element from the back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-7/spec/fifolifo/core_spec.clj:111

  2) The peek function should return the last of the back if front is nil
     Expected: 3
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-7/spec/fifolifo/core_spec.clj:133

Finished in 0.15052 seconds
29 examples, 2 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFFFFFFFF...FFFFFFFFFFF.F

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:21

  2) The stack size function should give the correct stack size
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:27

  3) The stack size function should give 0 for nil
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:30

  4) The push function should push correctly
     Expected: #fifolifo.core.Stack{:top (1 2 3), :size 3}
          got: #fifolifo.core.Stack{:top (1 [:top (2 3)] [:size 2]), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:37

  5) The push function should incement size when pushed
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:41

  6) The push function should add to front of top
     Expected: (1 2 3)
          got: (1 [:top (2 3)] [:size 2]) (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:45

  7) The pop function should remove correctly
     Expected: #fifolifo.core.Stack{:top (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:52

  8) The pop function should decrement the size
     Expected: 2
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:56

  9) The pop function should remoce the front of the top
     Expected: (2 3)
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:60

  10) The pop function should work with nil
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:63

  11) The top function should return the top
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:70

  12) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:85

  13) The queue size function should return the size of empty
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:91

  14) The queue size function should return the size
     Expected: 4
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:94

  15) The nequeue function should add an element to the back
     Expected: #fifolifo.core.Queue{:back (5 1 2 3), :front nil, :size 4}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:101

  16) The nequeue function should add and element to an empty queue
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:104

  17) The dequeue function should remove an element from the back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:111

  18) The dequeue function should work with elements only in front
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:115

  19) The dequeue function should work with elements in both
     Expected: #fifolifo.core.Queue{:back (1 2 3), :front (5 6), :size 5}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:119

  20) The dequeue function should work with nil
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:122

  21) The peek function should return the front if there is something in front
     Expected: 4
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:129

  22) The peek function should return the last of the back if front is nil
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:133

  23) The peek function should return the first of the front if back is nil
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-8/spec/fifolifo/core_spec.clj:140

Finished in 0.20753 seconds
29 examples, 23 failures


** Details for Flipping doesn't erase back.

.....................F.......

Failures:

  1) The dequeue function should remove an element from the back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (1 2 3), :front (2 1), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-9/spec/fifolifo/core_spec.clj:111

Finished in 0.06596 seconds
29 examples, 1 failures


** Details for Queue behaves like a stack.

.....................FFF.FF.F

Failures:

  1) The dequeue function should remove an element from the back
     Expected: #fifolifo.core.Queue{:back nil, :front (2 1), :size 2}
          got: #fifolifo.core.Queue{:back (2 3), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-10/spec/fifolifo/core_spec.clj:111

  2) The dequeue function should work with elements only in front
     Expected: #fifolifo.core.Queue{:back nil, :front (2 3), :size 2}
          got: #fifolifo.core.Queue{:back (), :front (1 2 3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-10/spec/fifolifo/core_spec.clj:115

  3) The dequeue function should work with elements in both
     Expected: #fifolifo.core.Queue{:back (1 2 3), :front (5 6), :size 5}
          got: #fifolifo.core.Queue{:back (2 3), :front (4 5 6), :size 5} (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-10/spec/fifolifo/core_spec.clj:119

  4) The peek function should return the front if there is something in front
     Expected: 4
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-10/spec/fifolifo/core_spec.clj:129

  5) The peek function should return the last of the back if front is nil
     Expected: 3
          got: 1 (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-10/spec/fifolifo/core_spec.clj:133

  6) The peek function should return the first of the front if back is nil
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/aariaz/broke-10/spec/fifolifo/core_spec.clj:140

Finished in 0.09134 seconds
29 examples, 6 failures
