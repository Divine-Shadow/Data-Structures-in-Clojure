Lab report for Linked List Lab - aariaz
Timestamp: 2013-10-02 20:21:36

|  :scenario |                                    :title |                                   :result | :score |
|------------+-------------------------------------------+-------------------------------------------+--------|
|    working |     Test student code vs instructor tests |                                      Pass |     45 |
| qualifying |     Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |             Insert at end mishandles nil. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |     Sorted insert sorts in reverse order. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |     Sorted insert doesn't recycle memory. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |          Search doesn't handle base case. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |                Delete removes all copies. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |                           Delete doesn't. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |              Delete all only deletes one. |      Pass: Student tests detected errors. |      5 |
|    broke-8 |                Delete all truncates list. | Fail: Student tests did not detect error. |      0 |
|    broke-9 |          Efficient delete doesn't delete. |      Pass: Student tests detected errors. |      5 |
|   broke-10 | Efficient delete doesn't return original. | Fail: Student tests did not detect error. |      0 |
|      total |                               Total Score |                                           |     90 |

Details:


** Details for Test student code vs instructor tests

........................

Finished in 0.00545 seconds
24 examples, 0 failures


** Details for Test student tests vs instructor code

.............................

Finished in 0.00578 seconds
29 examples, 0 failures


** Details for Insert at end mishandles nil.

.......FFF...................

Failures:

  1) insert-at-end creates a cons cell.
     Expected: nil
     not to =: nil
     /home/grader/quarry/linked-list-lab/aariaz/broke-1/spec/linked_lists/core_spec.clj:37

  2) insert-at-end should work with empty lists.
     Expected: #linked_lists.core.Cons{:car 10, :cdr nil}
          got: nil (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-1/spec/linked_lists/core_spec.clj:39

  3) insert-at-end should work with lists with data.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-1/spec/linked_lists/core_spec.clj:42

Finished in 0.04240 seconds
29 examples, 3 failures


** Details for Sorted insert sorts in reverse order.

............FF.F.............

Failures:

  1) sorted insert should work with lists that are sorted.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}}
          got: #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 4, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-2/spec/linked_lists/core_spec.clj:52

  2) sorted insert should work with lists that are not sorted.
     Expected: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 9, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 4, :cdr #linked_lists.core.Cons{:car 9, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-2/spec/linked_lists/core_spec.clj:55

  3) sorted insert should work with lists that are sorted until the middle.
     Expected: #linked_lists.core.Cons{:car 0, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}}}
          got: #linked_lists.core.Cons{:car 5, :cdr #linked_lists.core.Cons{:car 0, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 6, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-2/spec/linked_lists/core_spec.clj:61

Finished in 0.04984 seconds
29 examples, 3 failures


** Details for Sorted insert doesn't recycle memory.

..............F..............

Failures:

  1) sorted insert should recycle memory.
     Expected truthy but was: false
     /home/grader/quarry/linked-list-lab/aariaz/broke-3/spec/linked_lists/core_spec.clj:58

Finished in 0.00671 seconds
29 examples, 1 failures


** Details for Search doesn't handle base case.

................F............

Failures:

  1) search should work with empty lists.
     Expected: true
          got: false (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-4/spec/linked_lists/core_spec.clj:66

Finished in 0.00598 seconds
29 examples, 1 failures


** Details for Delete removes all copies.

....................F........

Failures:

  1) delete should only delete one copy.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-5/spec/linked_lists/core_spec.clj:80

Finished in 0.06115 seconds
29 examples, 1 failures


** Details for Delete doesn't.

....................F......F.

Failures:

  1) delete should only delete one copy.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-6/spec/linked_lists/core_spec.clj:80

  2) efficient-delete should work with lists that have data.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-6/spec/linked_lists/core_spec.clj:105

Finished in 0.04557 seconds
29 examples, 2 failures


** Details for Delete all only deletes one.

.......................F.....

Failures:

  1) delete-all should work with non-empty lists with multiple of that data.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-7/spec/linked_lists/core_spec.clj:91

Finished in 0.03212 seconds
29 examples, 1 failures


** Details for Delete all truncates list.

.............................

Finished in 0.00427 seconds
29 examples, 0 failures


** Details for Efficient delete doesn't delete.

...........................F.

Failures:

  1) efficient-delete should work with lists that have data.
     Expected: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}
          got: #linked_lists.core.Cons{:car 1, :cdr #linked_lists.core.Cons{:car 2, :cdr #linked_lists.core.Cons{:car 3, :cdr nil}}} (using =)
     /home/grader/quarry/linked-list-lab/aariaz/broke-9/spec/linked_lists/core_spec.clj:105

Finished in 0.06553 seconds
29 examples, 1 failures


** Details for Efficient delete doesn't return original.

.............................

Finished in 0.00560 seconds
29 examples, 0 failures
