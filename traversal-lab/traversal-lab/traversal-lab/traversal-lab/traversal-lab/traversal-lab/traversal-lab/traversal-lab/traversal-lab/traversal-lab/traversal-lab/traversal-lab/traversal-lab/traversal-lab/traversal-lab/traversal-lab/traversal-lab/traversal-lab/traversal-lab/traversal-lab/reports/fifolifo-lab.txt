Lab report for Stack and Queue Lab - msteele
Timestamp: 2013-10-21 20:41:38

|  :scenario |                                  :title |                                   :result | :score |
|------------+-----------------------------------------+-------------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                      Fail |     40 |
| qualifying |   Test student tests vs instructor code |                                      Pass |      5 |
|    broke-1 |            Push doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. |      Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. |      Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. |      Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. |      Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Fail: Student tests did not detect error. |      0 |
|    broke-8 | Dequeue doesn't dequeue after flipping. |      Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Fail: Student tests did not detect error. |      0 |
|   broke-10 |             Queue behaves like a stack. |      Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                           |     85 |

Details:


** Details for Test student code vs instructor tests

..................FF

Failures:

  1) Queues should pull things out in the correct order.
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/working/spec/fifolifo/core_spec.clj:105

  2) Queues should be able to enqueue things after dequeueping.
     Expected: (30 20 10 8 5)
          got: (nil 10 10) (using =)
     /home/grader/quarry/fifolifo-lab/msteele/working/spec/fifolifo/core_spec.clj:115

Finished in 0.09771 seconds
20 examples, 2 failures


** Details for Test student tests vs instructor code

.......................

Finished in 0.00502 seconds
23 examples, 0 failures


** Details for Push doesn't increment size.

........FF.............

Failures:

  1) push should push an element onto the beginning of an empty stack
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (2), :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-1/spec/fifolifo/core_spec.clj:48

  2) push should push an element onto the beginning of a stack with data
     Expected: #fifolifo.core.Stack{:top (3 2), :size 2}
          got: #fifolifo.core.Stack{:top (3 2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-1/spec/fifolifo/core_spec.clj:50

Finished in 0.13640 seconds
23 examples, 2 failures


** Details for Pop of empty makes size negative.

..........F............

Failures:

  1) pop should do nothing for an element with an empty stack
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-2/spec/fifolifo/core_spec.clj:55

Finished in 0.05989 seconds
23 examples, 1 failures


** Details for Pop doesn't remove elements.

...........F...........

Failures:

  1) pop should remove the element from the top of a stack with more than one element
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (3 2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-3/spec/fifolifo/core_spec.clj:57

Finished in 0.09774 seconds
23 examples, 1 failures


** Details for Pop reverses elements.

...........F..F........

Failures:

  1) pop should remove the element from the top of a stack with more than one element
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (3), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-4/spec/fifolifo/core_spec.clj:57

  2) top should return the top of a stack with multiple elements
     Expected: 3
          got: 2 (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-4/spec/fifolifo/core_spec.clj:66

Finished in 0.09977 seconds
23 examples, 2 failures


** Details for Enqueue doesn't increment size.

.................FFF...

Failures:

  1) enqueue should add an element to the back of an empty queue
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (1), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-5/spec/fifolifo/core_spec.clj:78

  2) enqueue should add an element to the back of a queue with data
     Expected: #fifolifo.core.Queue{:back (1 2), :front nil, :size 2}
          got: #fifolifo.core.Queue{:back (1 2), :front nil, :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-5/spec/fifolifo/core_spec.clj:80

  3) enqueue should add an element to the back of a queue with data already in the front
     Expected: #fifolifo.core.Queue{:back (1 2), :front (3), :size 3}
          got: #fifolifo.core.Queue{:back (1 2), :front (3), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-5/spec/fifolifo/core_spec.clj:82

Finished in 0.04963 seconds
23 examples, 3 failures


** Details for Dequeue of empty makes size negative.

....................F..

Failures:

  1) dequeue should do nothing to an empty queue
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-6/spec/fifolifo/core_spec.clj:87

Finished in 0.09653 seconds
23 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

.......................

Finished in 0.00641 seconds
23 examples, 0 failures


** Details for Dequeue doesn't dequeue after flipping.

..F..FFFFFFF.FFFFFFFF.F

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:21

  2) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:34

  3) stack-size should return the size of an empty stack
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:40

  4) stack-size should return the size of a list with data
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:43

  5) push should push an element onto the beginning of an empty stack
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (2 [:top nil] [:size 0]), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:48

  6) push should push an element onto the beginning of a stack with data
     Expected: #fifolifo.core.Stack{:top (3 2), :size 2}
          got: #fifolifo.core.Stack{:top (3 [:top (2)] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:50

  7) pop should do nothing for an element with an empty stack
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:55

  8) pop should remove the element from the top of a stack with more than one element
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:57

  9) top should return the top of a stack with a single element
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:64

  10) top should return the top of a stack with multiple elements
     Expected: 3
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:66

  11) queue-size should return the size of an empty queue
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:71

  12) queue-size should return the size of a queue with data
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:73

  13) enqueue should add an element to the back of an empty queue
     Expected: #fifolifo.core.Queue{:back (1), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:78

  14) enqueue should add an element to the back of a queue with data
     Expected: #fifolifo.core.Queue{:back (1 2), :front nil, :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:80

  15) enqueue should add an element to the back of a queue with data already in the front
     Expected: #fifolifo.core.Queue{:back (1 2), :front (3), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:82

  16) dequeue should do nothing to an empty queue
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:87

  17) peek should return the next element that will come out of the front of a queue with data
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-8/spec/fifolifo/core_spec.clj:94

Finished in 0.27913 seconds
23 examples, 17 failures


** Details for Flipping doesn't erase back.

.......................

Finished in 0.00590 seconds
23 examples, 0 failures


** Details for Queue behaves like a stack.

......................F

Failures:

  1) peek should return the next element that will come out of the front of a queue with data
     Expected: 1
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/msteele/broke-10/spec/fifolifo/core_spec.clj:94

Finished in 0.01904 seconds
23 examples, 1 failures
