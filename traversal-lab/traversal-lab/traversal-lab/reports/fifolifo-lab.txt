Lab report for Stack and Queue Lab - tragin
Timestamp: 2013-10-21 22:58:20

|  :scenario |                                  :title |                              :result | :score |
|------------+-----------------------------------------+--------------------------------------+--------|
|    working |   Test student code vs instructor tests |                                 Pass |     45 |
| qualifying |   Test student tests vs instructor code |                                 Pass |      5 |
|    broke-1 |            Push doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-2 |       Pop of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-3 |            Pop doesn't remove elements. | Pass: Student tests detected errors. |      5 |
|    broke-4 |                  Pop reverses elements. | Pass: Student tests detected errors. |      5 |
|    broke-5 |         Enqueue doesn't increment size. | Pass: Student tests detected errors. |      5 |
|    broke-6 |   Dequeue of empty makes size negative. | Pass: Student tests detected errors. |      5 |
|    broke-7 |  Dequeue doesn't reverse when flipping. | Pass: Student tests detected errors. |      5 |
|    broke-8 | Dequeue doesn't dequeue after flipping. | Pass: Student tests detected errors. |      5 |
|    broke-9 |            Flipping doesn't erase back. | Pass: Student tests detected errors. |      5 |
|   broke-10 |             Queue behaves like a stack. | Pass: Student tests detected errors. |      5 |
|      total |                             Total Score |                                      |    100 |

Details:


** Details for Test student code vs instructor tests

....................

Finished in 0.01620 seconds
20 examples, 0 failures


** Details for Test student tests vs instructor code

.............

Finished in 0.00376 seconds
13 examples, 0 failures


** Details for Push doesn't increment size.

...F.........

Failures:

  1) The stack declaration should push elts
     Expected: #fifolifo.core.Stack{:top (3 2), :size 2}
          got: #fifolifo.core.Stack{:top (3 2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-1/spec/fifolifo/core_spec.clj:25

Finished in 0.04493 seconds
13 examples, 1 failures


** Details for Pop of empty makes size negative.

....F........

Failures:

  1) The pop function should work when empty.
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: #fifolifo.core.Stack{:top (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-2/spec/fifolifo/core_spec.clj:34

Finished in 0.09167 seconds
13 examples, 1 failures


** Details for Pop doesn't remove elements.

.....FF......

Failures:

  1) The pop function should decrement size.
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (3 2), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-3/spec/fifolifo/core_spec.clj:38

  2) The pop function should not reorder elements.
     Expected: #fifolifo.core.Stack{:top (3 2 1), :size 3}
          got: #fifolifo.core.Stack{:top (4 3 2 1), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-3/spec/fifolifo/core_spec.clj:42

Finished in 0.13832 seconds
13 examples, 2 failures


** Details for Pop reverses elements.

.....FF......

Failures:

  1) The pop function should decrement size.
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: #fifolifo.core.Stack{:top (3), :size 1} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-4/spec/fifolifo/core_spec.clj:38

  2) The pop function should not reorder elements.
     Expected: #fifolifo.core.Stack{:top (3 2 1), :size 3}
          got: #fifolifo.core.Stack{:top (4 3 2), :size 3} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-4/spec/fifolifo/core_spec.clj:42

Finished in 0.09110 seconds
13 examples, 2 failures


** Details for Enqueue doesn't increment size.

............F

Failures:

  1) The enqueue function should add elements.
     Expected: #fifolifo.core.Queue{:back (2), :front nil, :size 1}
          got: #fifolifo.core.Queue{:back (2), :front nil, :size 0} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-5/spec/fifolifo/core_spec.clj:73

Finished in 0.09544 seconds
13 examples, 1 failures


** Details for Dequeue of empty makes size negative.

..........F..

Failures:

  1) The dequeue function should work when empty.
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: #fifolifo.core.Queue{:back nil, :front (), :size -1} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-6/spec/fifolifo/core_spec.clj:61

Finished in 0.08030 seconds
13 examples, 1 failures


** Details for Dequeue doesn't reverse when flipping.

...........F.

Failures:

  1) The dequeue function should reverse properly.
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: #fifolifo.core.Queue{:back nil, :front (20 10), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-7/spec/fifolifo/core_spec.clj:65

Finished in 0.08009 seconds
13 examples, 1 failures


** Details for Dequeue doesn't dequeue after flipping.

..FFFFF..FFFF

Failures:

  1) The stack declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:21

  2) The stack declaration should push elts
     Expected: #fifolifo.core.Stack{:top (3 2), :size 2}
          got: #fifolifo.core.Stack{:top (3 [:top (2)] [:size 1]), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:25

  3) The pop function should work when empty.
     Expected: #fifolifo.core.Stack{:top nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:34

  4) The pop function should decrement size.
     Expected: #fifolifo.core.Stack{:top (2), :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:38

  5) The pop function should not reorder elements.
     Expected: #fifolifo.core.Stack{:top (3 2 1), :size 3}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:42

  6) The queue declaration should have a size of zero.
     Expected: 0
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:54

  7) The dequeue function should work when empty.
     Expected: #fifolifo.core.Queue{:back nil, :front nil, :size 0}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:61

  8) The dequeue function should reverse properly.
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:65

  9) The enqueue function should add elements.
     Expected: #fifolifo.core.Queue{:back (2), :front nil, :size 1}
          got: nil (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-8/spec/fifolifo/core_spec.clj:73

Finished in 0.16997 seconds
13 examples, 9 failures


** Details for Flipping doesn't erase back.

...........F.

Failures:

  1) The dequeue function should reverse properly.
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: #fifolifo.core.Queue{:back (30 20 10), :front (20 30), :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-9/spec/fifolifo/core_spec.clj:65

Finished in 0.13935 seconds
13 examples, 1 failures


** Details for Queue behaves like a stack.

...........F.

Failures:

  1) The dequeue function should reverse properly.
     Expected: #fifolifo.core.Queue{:back nil, :front (20 30), :size 2}
          got: #fifolifo.core.Queue{:back (20 10), :front nil, :size 2} (using =)
     /home/grader/quarry/fifolifo-lab/tragin/broke-10/spec/fifolifo/core_spec.clj:65

Finished in 0.08121 seconds
13 examples, 1 failures
